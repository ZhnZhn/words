{"version":3,"sources":["../../../src/components/zhn-containers/HrzContainer.jsx"],"names":["CL_DIV","_isInCont","arrComps","comp","key","_max","length","i","HrzContainer","state","containers","_onStore","actionType","option","props","addAction","Comp","setState","prevState","unshift","unsubscribe","store","listen","className","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AACA;;AAEA,IAAMA,SAAS,eAAf;;AAEA,IAAMC,YAAY,SAAZA,SAAY,CAACC,QAAD,EAAWC,IAAX,EAAoB;AAC9B,MAAEC,GAAF,GAAUD,IAAV,CAAEC,GAAF;AAAA,MAAgBC,IAAhB,GAAuBH,SAASI,MAAhC;AACN,MAAIC,IAAI,CAAR;AACA,OAAIA,CAAJ,EAAMA,IAAEF,IAAR,EAAaE,GAAb,EAAkB;AAChB,QAAIL,SAASK,CAAT,EAAYH,GAAZ,KAAoBA,GAAxB,EAA6B;AAC3B,aAAO,IAAP;AACD;AACF;AACD,SAAO,KAAP;AACD,CATD;;IAWMI,Y;;;;;;;;;;;;;;gNAaJC,K,GAAQ;AACNC,kBAAY;AADN,K,QAYRC,Q,GAAW,UAACC,UAAD,EAAaC,MAAb,EAAwB;AAChC,UAAID,eAAe,MAAKE,KAAL,CAAWC,SAA1B,IAAuCF,MAAvC,IAAiDA,OAAOG,IAA5D,EAAiE;AAC/D,cAAKC,QAAL,CAAc,qBAAa;AACzB,cAAMd,OAAOU,OAAOG,IAApB;AACA,cAAI,CAACf,UAAUiB,UAAUR,UAApB,EAAgCP,IAAhC,CAAL,EAA4C;AAC1Ce,sBAAUR,UAAV,CAAqBS,OAArB,CAA6BhB,IAA7B;AACD;AACD,iBAAOe,SAAP;AACD,SAND;AAOD;AACH,K;;AAlCD;;;;;;;;;;;;wCAgBmB;AACjB,WAAKE,WAAL,GAAmB,KAAKN,KAAL,CAAWO,KAAX,CAChBC,MADgB,CACT,KAAKX,QADI,CAAnB;AAED;;;2CACqB;AACpB,WAAKS,WAAL;AACD;;;6BAcO;AACA,UAAEG,SAAF,GAAgB,KAAKT,KAArB,CAAES,SAAF;AAAA,UACEb,UADF,GACiB,KAAKD,KADtB,CACEC,UADF;;AAEN,aACG;AAAA;AAAA,UAAK,WAAcV,MAAd,SAAwBuB,SAA7B;AACGb;AADH,OADH;AAKD;;;4BApCMc,Y,GAAe;AACpBD,aAAW;AADS,C;kBAuCTf,Y","file":"HrzContainer.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst CL_DIV = \"hrz-container\";\r\n\r\nconst _isInCont = (arrComps, comp) => {\r\n  const { key } = comp, _max = arrComps.length;\r\n  let i = 0;\r\n  for(i;i<_max;i++) {\r\n    if (arrComps[i].key === key) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nclass HrzContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    addAction: PropTypes.string\r\n  }\r\n  */\r\n  static defaultProps = {\r\n    className: ''\r\n  }\r\n\r\n  state = {\r\n    containers: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  _onStore = (actionType, option) => {\r\n     if (actionType === this.props.addAction && option && option.Comp){\r\n       this.setState(prevState => {\r\n         const comp = option.Comp;\r\n         if (!_isInCont(prevState.containers, comp)) {\r\n           prevState.containers.unshift(comp)\r\n         }\r\n         return prevState;\r\n       })\r\n     }\r\n  }\r\n\r\n  render(){\r\n    const { className } = this.props\r\n        , { containers } = this.state;\r\n    return (\r\n       <div className={`${CL_DIV} ${className}`}>\r\n         {containers}\r\n       </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default HrzContainer\r\n"]}