{"version":3,"sources":["../../../src/components/zhn-containers/WrapperContainer.jsx"],"names":["WrapperContainer","state","isShow","inits","shows","data","dialogs","currentDialog","_onStore","actionType","option","SHOW_ACTION","props","modalDialogType","type","setState","getDialog","then","comp","push","_handleClose","_renderDialogs","store","map","dialog","index","createElement","key","onClose","bind","unsubscribe","listen"],"mappings":"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","file":"WrapperContainer.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport Router from '../dialogs/RouterModal';\r\nimport ModalContainer from './ModalContainer';\r\n\r\nclass WrapperContainer extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    SHOW_ACTION: PropTypes.string\r\n  }\r\n  */\r\n\r\n  state = {\r\n    isShow : false,\r\n    inits : {},\r\n    shows : {},\r\n    data : {},\r\n    dialogs : [],\r\n    currentDialog : null\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, option) => {\r\n     const { SHOW_ACTION } = this.props;\r\n     if (actionType === SHOW_ACTION){\r\n       const type = option.modalDialogType\r\n           , { inits, shows, data, dialogs } = this.state;\r\n\r\n       data[type] = option\r\n       shows[type] = true\r\n       if (inits[type]){\r\n         this.setState({\r\n           isShow: true, currentDialog: type,\r\n           shows, data\r\n         })\r\n       } else {\r\n         Router.getDialog(type)\r\n           .then(comp => {\r\n             if (comp) {\r\n               dialogs.push({ type, comp })\r\n               inits[type] = true\r\n               this.setState({\r\n                 isShow: true, currentDialog: type,\r\n                 shows, data, dialogs\r\n               });\r\n             }\r\n           })\r\n       }\r\n     }\r\n  }\r\n\r\n  _handleClose = (type) => {\r\n    this.state.shows[type] = false;\r\n    this.setState({\r\n      isShow : false,\r\n      currentDialog: null,\r\n      shows : this.state.shows\r\n    })\r\n  }\r\n\r\n  _renderDialogs = () => {\r\n    const { store } = this.props\r\n        , { shows, data, dialogs } = this.state;\r\n\r\n    return dialogs.map((dialog, index) => {\r\n      const { type, comp } = dialog;\r\n      return React.createElement(comp, {\r\n         key: type,\r\n         isShow: shows[type],\r\n         data: data[type],\r\n         store : store,\r\n         onClose: this._handleClose.bind(null, type)\r\n      })\r\n    })\r\n  }\r\n\r\n  render(){\r\n    const { isShow, currentDialog } = this.state;\r\n\r\n    return (\r\n      <ModalContainer\r\n          isShow={isShow}\r\n          onClose={this._handleClose.bind(null, currentDialog)}\r\n      >\r\n         {this._renderDialogs()}\r\n     </ModalContainer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default WrapperContainer\r\n"]}