{"version":3,"sources":["../../../src/components/zhn-atoms/OpenClose.jsx"],"names":["CL_CAPTION","STYLE","ROOT","backgroundColor","lineHeight","SVG","width","height","display","ROOT_CAPTION","paddingLeft","CAPTION","verticalAlign","color","fontFamily","fontWeight","fontSize","cursor","INLINE","BLOCK","NONE","FILL_OPEN","FILL_CLOSE","PATH_OPEN","PATH_CLOSE","OpenClose","props","_handleToggle","setState","isOpen","state","_handleKeyDown","event","keyCode","isClose","style","itemStyle","captionStyle","childrenStyle","caption","fillOpen","fillClose","afterCaptionComp","isDraggable","option","onDragStart","onDragEnter","onDragOver","onDragLeave","onDrop","children","_dragOption","draggable","bind","undefined","_pathV","_fillV","_styleCollapse","_classShow","_itemStyle","defaultProps"],"mappings":"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","file":"OpenClose.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst CL_CAPTION = 'open-close not-selected';\r\n\r\nconst STYLE = {\r\n  ROOT: {\r\n    //backgroundColor: '#4D4D4D',\r\n    backgroundColor: 'inherit',\r\n    lineHeight: 2.5\r\n  },\r\n  SVG: {\r\n    width: '16px',\r\n    height: '16px',\r\n    display: 'inline-block'\r\n  },\r\n  ROOT_CAPTION: {\r\n    paddingLeft: '12px'\r\n  },\r\n  CAPTION: {\r\n    paddingLeft: '4px',\r\n    verticalAlign: 'top',\r\n    color: '#9e9e9e',\r\n    //color: '#8a8a8a',\r\n    //color: 'rgba(164, 135, 212, 1)',\r\n    fontFamily: 'Roboto, Arial Unicode MS, Arial, sans-serif',\r\n    fontWeight: 'bold',\r\n    fontSize: '16px',\r\n    cursor: 'pointer'\r\n  },\r\n  INLINE : {\r\n    display: 'inline-block'\r\n  },\r\n  BLOCK : {\r\n    display: 'block'\r\n  },\r\n  NONE : {\r\n    display : 'none'\r\n  }\r\n};\r\n\r\nconst FILL_OPEN = '#9e9e9e'\r\n    , FILL_CLOSE = 'transparent'\r\n    , PATH_OPEN = \"M 2,14 L 14,14 14,2 2,14\"\r\n    , PATH_CLOSE = \"M 2,2 L 14,8 2,14 2,2\";\r\n\r\nclass OpenClose extends Component {\r\n  /*\r\n  static propTypes = {\r\n    isClose: PropTypes.bool,\r\n\r\n    style: PropTypes.object,\r\n    styleNotSelected: PropTypes.object,\r\n    captionStyle: PropTypes.object,\r\n    childrenStyle: PropTypes.object,\r\n\r\n    caption: PropTypes.string,\r\n    fillOpen: PropTypes.string,\r\n    fillClose: PropTypes.string,\r\n\r\n    isDraggable: PropTypes.bool,\r\n    option: PropTypes.object,\r\n    onDragStart: PropTypes.func,\r\n    onDragEnter: PropTypes.func,\r\n    onDragOver: PropTypes.func,\r\n    onDragLeave: PropTypes.func,\r\n    onDrop: PropTypes.func,\r\n\r\n    children: PropTypes.oneOfType([\r\n       PropTypes.arrayOf(PropTypes.node),\r\n       PropTypes.node\r\n    ])\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    isClose: true,\r\n    fillOpen: FILL_OPEN,\r\n    fillClose: FILL_CLOSE\r\n  }\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      isOpen: !props.isClose\r\n    }\r\n  }\r\n\r\n  _handleToggle = () => {\r\n    this.setState({ isOpen : !this.state.isOpen })\r\n  }\r\n  _handleKeyDown = (event) => {\r\n    if (event.keyCode === 13 || event.keyCode === 27 ) {\r\n      this._handleToggle()\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            style, itemStyle,\r\n            captionStyle,\r\n            //styleCaption,\r\n            childrenStyle,\r\n            caption,\r\n            fillOpen, fillClose,\r\n            afterCaptionComp,\r\n            isDraggable, option, onDragStart, onDragEnter, onDragOver, onDragLeave, onDrop,\r\n            children\r\n          } = this.props\r\n          , _dragOption = (isDraggable)\r\n               ? {\r\n                     draggable : true,\r\n                     onDragStart : onDragStart.bind(null, option),\r\n                     onDrop : onDrop.bind(null, option),\r\n                     onDragEnter : onDragEnter,\r\n                     onDragOver : onDragOver,\r\n                     onDragLeave : onDragLeave\r\n                 }\r\n              : undefined ;\r\n\r\n    let _pathV, _fillV, _styleCollapse, _classShow, _itemStyle;\r\n    if (this.state.isOpen){\r\n      _pathV = PATH_OPEN;\r\n      _fillV = fillOpen;\r\n      _styleCollapse = STYLE.BLOCK;\r\n      _classShow = 'show-popup';\r\n      _itemStyle = null;\r\n    } else {\r\n      _pathV = PATH_CLOSE;\r\n      _fillV = fillClose;\r\n      _styleCollapse = STYLE.NONE;\r\n      _classShow = null;\r\n      _itemStyle = itemStyle;\r\n    }\r\n\r\n    return (\r\n      <div style={{...STYLE.ROOT, ...style}}>\r\n        <div\r\n           role=\"button\"\r\n           className={CL_CAPTION}\r\n           tabIndex=\"0\"\r\n           style={{...STYLE.ROOT_CAPTION, ..._itemStyle }}\r\n           onClick={this._handleToggle}\r\n           onKeyDown={this._handleKeyDown}\r\n           {..._dragOption}\r\n         >\r\n          <div style={STYLE.SVG}>\r\n             <svg\r\n                viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\"\r\n                preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                style={STYLE.INLINE}\r\n              >\r\n               <path\r\n                  d={_pathV}\r\n                  fill={_fillV}\r\n                  strokeWidth=\"1\" stroke={fillOpen}\r\n               />\r\n             </svg>\r\n         </div>\r\n         <span style={{...STYLE.CAPTION, ...captionStyle}} >\r\n            {caption}\r\n         </span>\r\n         {afterCaptionComp}\r\n       </div>\r\n      <div\r\n         className={_classShow}\r\n         style={{ ...childrenStyle, ..._styleCollapse }}\r\n       >\r\n        {children}\r\n      </div>\r\n     </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OpenClose\r\n"]}