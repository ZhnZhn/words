{"version":3,"sources":["../../../src/components/zhn-atoms/CaptionInput.jsx"],"names":["S","KEY","textDecoration","EMPTY","_toCaptionIn","caption","accessKey","captionIn","_index","toLowerCase","indexOf","before","substring","key","after","CaptionInput","className","rootStyle","children"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,IAAI;AACRC,OAAK;AACHC,oBAAgB;AADb;AADG,CAAV;;AAMA,IAAMC,QAAQ,EAAd;;AAEA,IAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,SAAV,EAAwB;AAC3C,MAAMC,YAAYF,WAAW,IAAX,GACPF,KADO,GAEPA,QAAQE,OAFnB;AAAA,MAGMG,SAASD,UACNE,WADM,GAENC,OAFM,CAEEJ,SAFF,CAHf;AAMA,MAAIA,aAAaE,WAAW,CAAC,CAA7B,EAAgC;AAC9B,WAAO;AACLG,cAAQJ,UAAUK,SAAV,CAAoB,CAApB,EAAuBJ,MAAvB,CADH;AAELK,WAAKN,UAAUK,SAAV,CAAoBJ,MAApB,EAA4BA,SAAO,CAAnC,CAFA;AAGLM,aAAQP,UAAUK,SAAV,CAAoBJ,SAAO,CAA3B;AAHH,KAAP;AAKD;AACD,SAAO,EAAED,oBAAF,EAAP;AACD,CAfD;;AAiBA,IAAMQ,eAAe,SAAfA,YAAe,OAIf;AAAA,MAHJC,SAGI,QAHJA,SAGI;AAAA,MAHOC,SAGP,QAHOA,SAGP;AAAA,MAFJZ,OAEI,QAFJA,OAEI;AAAA,MAFKC,SAEL,QAFKA,SAEL;AAAA,MADJY,QACI,QADJA,QACI;;AAAA,sBAIMd,aAAaC,OAAb,EAAsBC,SAAtB,CAJN;AAAA,MAEIC,SAFJ,iBAEIA,SAFJ;AAAA,MAGIO,KAHJ,iBAGIA,KAHJ;AAAA,MAGWD,GAHX,iBAGWA,GAHX;AAAA,MAGgBF,MAHhB,iBAGgBA,MAHhB;;AAKJ,MAAI,OAAOJ,SAAP,KAAqB,WAAzB,EAAsC;AACpC,WACE;AAAA;AAAA,QAAM,WAAWS,SAAjB,EAA4B,OAAOC,SAAnC;AACGV,eADH;AAEGW;AAFH,KADF;AAMD;AACD,SACE;AAAA;AAAA,MAAM,WAAWF,SAAjB,EAA4B,OAAOC,SAAnC;AACG;AAAA;AAAA;AAAON;AAAP,KADH;AAEG;AAAA;AAAA,QAAM,OAAOX,EAAEC,GAAf;AAAqBY;AAArB,KAFH;AAGG;AAAA;AAAA;AAAOC;AAAP,KAHH;AAIII;AAJJ,GADF;AAQD,CAzBD;;kBA2BeH,Y","file":"CaptionInput.js","sourcesContent":["import React from 'react'\r\n\r\nconst S = {\r\n  KEY: {\r\n    textDecoration: 'underline'\r\n  }\r\n};\r\n\r\nconst EMPTY = '';\r\n\r\nconst _toCaptionIn = (caption, accessKey) => {\r\n  const captionIn = caption == null\r\n           ? EMPTY\r\n           : EMPTY + caption\r\n      , _index = captionIn\r\n          .toLowerCase()\r\n          .indexOf(accessKey);\r\n  if (accessKey && _index !== -1) {\r\n    return {\r\n      before: captionIn.substring(0, _index),\r\n      key: captionIn.substring(_index, _index+1),\r\n      after:  captionIn.substring(_index+1)\r\n    };\r\n  }\r\n  return { captionIn };\r\n};\r\n\r\nconst CaptionInput = ({\r\n  className, rootStyle,\r\n  caption, accessKey,\r\n  children\r\n}) => {\r\n  const {\r\n          captionIn,\r\n          after, key, before\r\n        } = _toCaptionIn(caption, accessKey);  \r\n  if (typeof captionIn !== 'undefined') {\r\n    return (\r\n      <span className={className} style={rootStyle}>\r\n        {captionIn}\r\n        {children}\r\n      </span>\r\n    );\r\n  }\r\n  return (\r\n    <span className={className} style={rootStyle}>\r\n       <span>{before}</span>\r\n       <span style={S.KEY}>{key}</span>\r\n       <span>{after}</span>\r\n       {children}\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default CaptionInput\r\n"]}