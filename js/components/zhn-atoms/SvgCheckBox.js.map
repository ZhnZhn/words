{"version":3,"sources":["../../../src/components/zhn-atoms/SvgCheckBox.jsx"],"names":["S","DIV","display","width","height","cursor","SVG","EL_CHECKED","YELLOW","BLANK","_isFn","fn","SvgCheckBox","props","value","onCheck","onUnCheck","_isOnCheck","_isOnUnCheck","state","isChecked","nextProps","setState","rootStyle","_elChecked","_hClick","GREY","setUnchecked"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;AADA;;;;AAGA;;;;;;AAGA,IAAMA,IAAI;AACRC,OAAM;AACJC,aAAS,cADL;AAEJC,WAAO,EAFH;AAGJC,YAAQ,EAHJ;AAIJC,YAAQ;AAJJ,GADE;AAORC,OAAM;AACJJ,aAAS;AADL;AAPE,CAAV;;AAYA,IAAMK,aACJ;AACI,KAAE,mBADN;AAEI,eAAY,GAFhB;AAGI,UAAQ,gBAAEC,MAHd;AAII,QAAM,gBAAEC;AAJZ,EADF;;AASA,IAAMC,QAAQ,SAARA,KAAQ;AAAA,SAAM,OAAOC,EAAP,KAAc,UAApB;AAAA,CAAd;;IAEMC,W;;;AACJ;;;;;;;;AAQA,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA,wIACVA,KADU;;AAAA;;AAAA,QAGRC,KAHQ,GAGsBD,KAHtB,CAGRC,KAHQ;AAAA,QAGDC,OAHC,GAGsBF,KAHtB,CAGDE,OAHC;AAAA,QAGQC,SAHR,GAGsBH,KAHtB,CAGQG,SAHR;;AAIhB,UAAKC,UAAL,GAAkBP,MAAMK,OAAN,CAAlB;AACA,UAAKG,YAAL,GAAoBR,MAAMM,SAAN,CAApB;;AAEA,UAAKG,KAAL,GAAa;AACTC,iBAAW,CAAC,CAACN;AADJ,KAAb;AAPgB;AAUjB;;;;qDAEgCO,S,EAAU;AACzC,UAAI,KAAKR,KAAL,KAAeQ,SAAf,IACG,OAAOA,UAAUP,KAAjB,KAA2B,WADlC,EAEA;AACE,aAAKQ,QAAL,CAAc,EAAEF,WAAW,CAAC,CAACC,UAAUP,KAAzB,EAAd;AACD;AACF;;;6BAiBO;AACA,UAAES,SAAF,GAAgB,KAAKV,KAArB,CAAEU,SAAF;AAAA,UACEH,SADF,GACgB,KAAKD,KADrB,CACEC,SADF;AAAA,UAEAI,UAFA,GAEcJ,SAAD,GACTb,UADS,GAET,IAJJ;;AAKN,aACE;AAAA;AAAA;AACG,4CAAYP,EAAEC,GAAd,EAAsBsB,SAAtB,CADH;AAEG,mBAAS,KAAKE;AAFjB;AAIE;AAAA;AAAA;AACI,qBAAQ,WADZ,EACwB,OAAM,MAD9B,EACqC,QAAO,MAD5C;AAEI,iCAAoB,MAFxB,EAE+B,OAAM,4BAFrC;AAGI,mBAAOzB,EAAEM;AAHb;AAKE;AACG,eAAE,GADL,EACS,GAAE,GADX;AAEG,oBAAO,IAFV,EAEe,OAAM,IAFrB;AAGG,yBAAY,GAHf,EAGmB,IAAG,GAHtB;AAIG,oBAAQ,gBAAEoB,IAJb,EAIoB,MAAM,gBAAEjB;AAJ5B,YALF;AAWGe;AAXH;AAJF,OADF;AAoBD;;;;;;OAzCDC,O,GAAU,YAAM;AAAA,QAEPR,UAFO,GAIJ,MAJI,CAEPA,UAFO;AAAA,QAEKC,YAFL,GAIJ,MAJI,CAEKA,YAFL;AAAA,QAGNC,KAHM,GAIJ,MAJI,CAGNA,KAHM;AAAA,QAGCN,KAHD,GAIJ,MAJI,CAGCA,KAHD;AAAA,QAKNE,OALM,GAKiBF,KALjB,CAKNE,OALM;AAAA,QAKGC,SALH,GAKiBH,KALjB,CAKGG,SALH;AAAA,QAMNI,SANM,GAMQD,KANR,CAMNC,SANM;;AAOd,QAAI,CAACA,SAAD,IAAcH,UAAlB,EAA6B;AAC3BF,cAAQ,MAAR;AACD,KAFD,MAEO,IAAIG,YAAJ,EAAiB;AACtBF,gBAAU,MAAV;AACD;AACD,WAAKM,QAAL,CAAc,EAAEF,WAAW,CAACA,SAAd,EAAd;AACD,G;;OA8BDO,Y,GAAe,YAAM;AACnB,WAAKL,QAAL,CAAc,EAAEF,WAAW,KAAb,EAAd;AACD,G;;kBAGYR,W","file":"SvgCheckBox.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport C from '../styles/Color';\r\n\r\n\r\nconst S = {\r\n  DIV : {\r\n    display: 'inline-block',\r\n    width: 16,\r\n    height: 16,\r\n    cursor: 'pointer'\r\n  },\r\n  SVG : {\r\n    display: 'inline-block'\r\n  }\r\n};\r\n\r\nconst EL_CHECKED = (\r\n  <path\r\n      d=\"M 2,3 L 8,14 14,3\"\r\n      strokeWidth=\"2\"\r\n      stroke={C.YELLOW}\r\n      fill={C.BLANK}\r\n  />\r\n);\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nclass SvgCheckBox extends Component {\r\n  /*\r\n  static propTypes = {\r\n    value: PropTypes.bool,\r\n    onCheck: PropTypes.func,\r\n    onUnCheck: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    const { value, onCheck, onUnCheck } = props;\r\n    this._isOnCheck = _isFn(onCheck)\r\n    this._isOnUnCheck = _isFn(onUnCheck)\r\n\r\n    this.state = {\r\n        isChecked: !!value,\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps){\r\n    if (this.props !== nextProps\r\n        && typeof nextProps.value !== 'undefined')\r\n    {\r\n      this.setState({ isChecked: !!nextProps.value })\r\n    }\r\n  }\r\n\r\n  _hClick = () => {\r\n    const {\r\n           _isOnCheck, _isOnUnCheck,\r\n            state, props\r\n          } = this\r\n        , { onCheck, onUnCheck } = props\r\n        , { isChecked } = state;\r\n    if (!isChecked && _isOnCheck){\r\n      onCheck(this);\r\n    } else if (_isOnUnCheck){\r\n      onUnCheck(this);\r\n    }\r\n    this.setState({ isChecked: !isChecked });\r\n  }\r\n\r\n  render(){\r\n    const { rootStyle } = this.props\r\n        , { isChecked } = this.state\r\n        , _elChecked = (isChecked)\r\n            ? EL_CHECKED\r\n            : null;\r\n    return (\r\n      <div\r\n         style={{ ...S.DIV, ...rootStyle }}\r\n         onClick={this._hClick}\r\n      >\r\n        <svg\r\n            viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\"\r\n            preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\r\n            style={S.SVG}\r\n        >\r\n          <rect\r\n             x=\"1\" y=\"1\"\r\n             height=\"14\" width=\"14\"\r\n             strokeWidth=\"2\" rx=\"3\"\r\n             stroke={C.GREY}  fill={C.BLANK}\r\n          />\r\n          {_elChecked}\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setUnchecked = () => {\r\n    this.setState({ isChecked: false });\r\n  }\r\n}\r\n\r\nexport default SvgCheckBox\r\n"]}