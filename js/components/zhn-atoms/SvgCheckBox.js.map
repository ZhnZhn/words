{"version":3,"sources":["../../../src/components/zhn-atoms/SvgCheckBox.jsx"],"names":["DF_COLOR_IS","S","DIV","display","width","height","cursor","SVG","SvgChecked","stroke","C","BLANK","_isFn","fn","SvgCheckBox","props","_hClick","onCheck","onUnCheck","isChecked","state","setState","_hKeyDown","evt","preventDefault","setUnchecked","initialValue","render","style","_restProps","fill","GREY","Component"],"mappings":"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","sourcesContent":["import { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport isKeyEnter from './isKeyEnter'\r\nimport C from '../styles/Color';\r\n\r\n\r\n//const DF_COLOR_IS = \"#80c040\";\r\nconst DF_COLOR_IS = \"#2f7ed8\"\r\n\r\nconst S = {\r\n  DIV : {\r\n    display: 'inline-block',\r\n    width: 16,\r\n    height: 16,\r\n    cursor: 'pointer'\r\n  },\r\n  SVG : {\r\n    display: 'inline-block'\r\n  }\r\n};\r\n\r\nconst SvgChecked = ({ stroke }) => (\r\n  <path\r\n      //d=\"M 2,3 L 8,14 14,3\"\r\n      d=\"M 2,5 L 8,14 14,1\"\r\n      strokeWidth=\"2\"\r\n      strokeLinecap=\"round\"\r\n      stroke={stroke}\r\n      fill={C.BLANK}\r\n  />\r\n);\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nclass SvgCheckBox extends Component {\r\n  /*\r\n  static propTypes = {\r\n    initialValue: PropTypes.bool,\r\n    stroke: PropTypes.string,\r\n    onCheck: PropTypes.func,\r\n    onUnCheck: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super(props);\r\n    const { initialValue } = props;\r\n\r\n    this.state = {\r\n        isChecked: !!initialValue,\r\n    }\r\n  }\r\n\r\n\r\n  _hClick = () => {\r\n    const { onCheck, onUnCheck } = this.props\r\n    , { isChecked } = this.state;\r\n    if (!isChecked && _isFn(onCheck)){\r\n      onCheck(this);\r\n    } else if (_isFn(onUnCheck)){\r\n      onUnCheck(this);\r\n    }\r\n    this.setState({ isChecked: !isChecked });\r\n  }\r\n\r\n  _hKeyDown = (evt) => {\r\n    if (isKeyEnter(evt)){\r\n      evt.preventDefault()\r\n      this._hClick()\r\n    }\r\n  }\r\n\r\n  render(){\r\n    const { style, stroke } = this.props\r\n    , { isChecked } = this.state\r\n    , _restProps = isChecked\r\n        ? { stroke: DF_COLOR_IS, fill: DF_COLOR_IS}\r\n        : { stroke: C.GREY, fill: C.BLANK };\r\n    return (\r\n      <div\r\n         role=\"checkbox\"\r\n         tabIndex=\"0\"\r\n         aria-checked={isChecked}\r\n         style={{ ...S.DIV, ...style }}\r\n         onClick={this._hClick}\r\n         onKeyDown={this._hKeyDown}\r\n      >\r\n        <svg\r\n            viewBox=\"0 0 16 16\" width=\"100%\" height=\"100%\"\r\n            preserveAspectRatio=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\r\n            style={S.SVG}\r\n        >\r\n          <rect\r\n             x=\"1\" y=\"1\"\r\n             height=\"14\" width=\"14\"\r\n             strokeWidth=\"2\" rx=\"3\"\r\n             strokeLinecap=\"round\"\r\n             {..._restProps}\r\n          />\r\n          { isChecked\r\n              ? <SvgChecked stroke={stroke} />\r\n              : null\r\n          }\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setUnchecked = () => {\r\n    this.setState({ isChecked: false });\r\n  }\r\n}\r\n\r\nexport default SvgCheckBox\r\n"],"file":"SvgCheckBox.js"}