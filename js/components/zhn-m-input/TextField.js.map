{"version":3,"sources":["../../../src/components/zhn-m-input/TextField.jsx"],"names":["CL","SELECT","LABEL","DIV","INPUT","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","LABEL_ON_ERROR","color","LINE_ERROR","borderBottom","KEY","textDecoration","_isFn","fn","_isStr","str","_crCaption","caption","accessKey","cPrefix","keyIndex","toLowerCase","indexOf","substring","cKey","cTail","TextField","props","_handleFocusInput","isFocus","forceUpdate","_handleBlurInput","_handleInputChange","event","value","target","onTest","isOnTest","setState","isPassTest","_handleKeyDown","keyCode","isOnEnter","onEnter","_ref","n","inputNode","initValue","_firstTouch","_value","state","UNSAFE_componentWillReceiveProps","nextProps","render","rootStyle","labelStyle","inputStyle","errorMsg","restProps","_labelStyle","_labelErrStyle","_lineStyle","getValue","String","trim","setValue","focus","setSelectionRange","len","length","Component","defaultProps","spellCheck"],"mappings":"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","sourcesContent":["import { Component } from 'react'\r\n//import PropsTypes from 'prop-types'\r\n\r\n//const DB_TOUCH_PERIOD = 500\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#f44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #F44336'\r\n  },\r\n  KEY: {\r\n    textDecoration: 'underline'\r\n  }\r\n\r\n};\r\n\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\nconst _isStr = str => typeof str === 'string';\r\n\r\nconst _crCaption = (caption, accessKey) => {\r\n  if (!accessKey) {\r\n    return { cPrefix: caption };\r\n  }\r\n  const keyIndex = caption.toLowerCase()\r\n    .indexOf(accessKey.toLowerCase());\r\n  if (keyIndex === -1){\r\n    return { cPrefix: caption };\r\n  }\r\n  return {\r\n    cPrefix: caption.substring(0, keyIndex),\r\n    cKey: caption.substring(keyIndex, keyIndex+1),\r\n    cTail: caption.substring(keyIndex+1)\r\n  };\r\n};\r\n\r\nclass TextField extends Component {\r\n  /*\r\n  static propTypes = {\r\n    rootStyle: PropTypes.object,\r\n    caption: PropTypes.string,\r\n    labelStyle: PropTypes.object,\r\n    inputStyle: PropTypes.object,\r\n    errorMsg: PropTypes.string,\r\n    initValue: PropTypes.string,\r\n    accessKey: PropTypes.string,\r\n    spellCheck: PropTypes.bool,\r\n    onTest: PropTypes.func,\r\n    onEnter: PropTypes.func,\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    caption: '',\r\n    accessKey: '',\r\n    spellCheck: false,\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    const { onTest, onEnter, initValue } = props;\r\n\r\n    this.isFocus = false;\r\n    this.isOnTest = _isFn(onTest)\r\n    this.isOnEnter = _isFn(onEnter)\r\n\r\n    this._firstTouch = 0;\r\n\r\n    const _value = initValue || ''\r\n    this.state = {\r\n      value: _value,\r\n      isPassTest: this.isOnTest\r\n         ? onTest(_value) : true\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps){\r\n    /* update new initValue from parent component */\r\n    if (this.props !== nextProps\r\n      && this.props.initValue !== nextProps.initValue ) {\r\n        this.setState({\r\n          value: nextProps.initValue || ''\r\n        })\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n  _handleClearInput = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n\r\n  _handleDbTouch = (ev) => {\r\n    const _ms = Date.now();\r\n    if (this._firstTouch) {\r\n      if (_ms - this._firstTouch<DB_TOUCH_PERIOD) {\r\n        this._firstTouch = 0\r\n        this._handleClearInput()\r\n      } else {\r\n        this._firstTouch = _ms\r\n      }\r\n    } else {\r\n      this._firstTouch = _ms\r\n    }\r\n  }\r\n  */\r\n\r\n  _handleFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _handleBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _handleInputChange = (event) => {\r\n    const { value } = event.target\r\n        , { onTest  } = this.props;\r\n    if (this.isOnTest) {\r\n      this.setState({\r\n        value, isPassTest: onTest(value)\r\n      })\r\n    } else {\r\n      this.setState({ value })\r\n    }\r\n  }\r\n _handleKeyDown = (event) => {\r\n   const { keyCode } = event;\r\n   if (keyCode === 46){\r\n     this.setState({ value: '' })\r\n   } else if (keyCode === 13 && this.isOnEnter) {\r\n     this.props.onEnter(event.target.value)\r\n   }\r\n }\r\n\r\n _ref = n => this.inputNode = n\r\n\r\n  render(){\r\n    const {\r\n            rootStyle, caption,\r\n            labelStyle, inputStyle,\r\n            accessKey,\r\n            errorMsg='',\r\n            ...restProps\r\n          } = this.props\r\n        , { value, isPassTest } = this.state\r\n        , _labelStyle = (value || this.isFocus)\r\n            ? void 0\r\n            : S.LABEL_TO_INPUT\r\n        , _labelErrStyle = (isPassTest)\r\n            ? void 0\r\n            : S.LABEL_ON_ERROR\r\n        , _lineStyle = (isPassTest)\r\n            ? void 0\r\n            : S.LINE_ERROR\r\n       , { cPrefix, cKey, cTail } = _crCaption(caption, accessKey);\r\n\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={rootStyle}\r\n        //onDoubleClick={this._handleClearInput}\r\n        //onTouchStart={this._handleDbTouch}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{...labelStyle, ..._labelStyle, ..._labelErrStyle}}\r\n         >\r\n          {cPrefix}\r\n          <span style={S.KEY}>{cKey}</span>\r\n          {cTail}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            ref={this._ref}\r\n            type=\"text\"\r\n            className={CL.INPUT}\r\n            style={inputStyle}\r\n            value={value}\r\n            autoComplete=\"new-text\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            translate=\"false\"\r\n            accessKey={accessKey}\r\n            {...restProps}\r\n            onFocus={this._handleFocusInput}\r\n            onBlur={this._handleBlurInput}\r\n            onChange={this._handleInputChange}\r\n            onKeyDown={this._handleKeyDown}\r\n          />\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          { _lineStyle && <div className={CL.INPUT_MSG_ERR}>{errorMsg}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getValue(){\r\n    return String(this.state.value).trim();\r\n  }\r\n  setValue(str){\r\n    if (_isStr(str)){\r\n      this.setState({ value: str })\r\n    }\r\n  }\r\n  focus(){\r\n    if (this.inputNode) {\r\n      this.inputNode.focus()\r\n      if (_isFn(this.inputNode.setSelectionRange)) {\r\n        const len = this.state.value.length\r\n        this.inputNode.setSelectionRange(len, len)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TextField\r\n"],"file":"TextField.js"}