{"version":3,"sources":["../../../src/components/zhn-m-input/TextField.jsx"],"names":["DB_TOUCH_PERIOD","CL","SELECT","LABEL","DIV","INPUT","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","LABEL_ON_ERROR","color","LINE_ERROR","borderBottom","KEY","textDecoration","_isFn","fn","_crCaption","caption","accessKey","cPrefix","keyIndex","toLowerCase","indexOf","substring","cKey","cTail","TextField","props","onTest","onEnter","initValue","isFocus","isOnTest","isOnEnter","_firstTouch","_value","state","value","isPassTest","nextProps","setState","rootStyle","labelStyle","inputStyle","spellCheck","errorMsg","_labelStyle","undefined","_labelErrStyle","_lineStyle","_handleDbTouch","_ref","_handleFocusInput","_handleBlurInput","_handleInputChange","_handleKeyDown","String","trim","inputNode","focus","setSelectionRange","len","length","defaultProps","_handleClearInput","ev","_ms","Date","now","forceUpdate","event","target","keyCode","n"],"mappings":"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","file":"TextField.js","sourcesContent":["import React, { Component } from 'react'\r\n//import PropsTypes from 'prop-types'\r\n\r\n//import CaptionInput from '../zhn-atoms/CaptionInput'\r\n\r\nconst DB_TOUCH_PERIOD = 500\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#F44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #F44336'\r\n  },\r\n  KEY: {\r\n    textDecoration: 'underline'\r\n  }\r\n\r\n};\r\n\r\n\r\nconst _isFn = fn => typeof fn === 'function';\r\n\r\nconst _crCaption = (caption, accessKey) => {\r\n  if (!accessKey) {\r\n    return { cPrefix: caption };\r\n  }\r\n  const keyIndex = caption.toLowerCase()\r\n    .indexOf(accessKey.toLowerCase());\r\n  if (keyIndex === -1){\r\n    return { cPrefix: caption };\r\n  }\r\n  return {\r\n    cPrefix: caption.substring(0, keyIndex),\r\n    cKey: caption.substring(keyIndex, keyIndex+1),\r\n    cTail: caption.substring(keyIndex+1)\r\n  };\r\n};\r\n\r\nclass TextField extends Component {\r\n  /*\r\n  static propTypes = {\r\n    rootStyle: PropTypes.object,\r\n    caption: PropTypes.string,\r\n    labelStyle: PropTypes.object,\r\n    inputStyle: PropTypes.object,\r\n    errorMsg: PropTypes.string,\r\n    initValue: PropTypes.string,\r\n    accessKey: PropTypes.string,\r\n    spellCheck: PropTypes.bool,\r\n    onTest: PropTypes.func,\r\n    onEnter: PropTypes.func,\r\n  }\r\n  */\r\n\r\n  static defaultProps = {\r\n    caption: '',\r\n    accessKey: '',\r\n    spellCheck: false,\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    const { onTest, onEnter, initValue } = props;\r\n\r\n    this.isFocus = false;\r\n    this.isOnTest = _isFn(onTest)\r\n    this.isOnEnter = _isFn(onEnter)\r\n\r\n    this._firstTouch = 0;\r\n\r\n    const _value = initValue || ''\r\n    this.state = {\r\n      value: _value,\r\n      isPassTest: this.isOnTest\r\n         ? onTest(_value) : true\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps){\r\n    /* update new initValue from parent component */\r\n    if (this.props !== nextProps\r\n      && this.props.initValue !== nextProps.initValue ) {\r\n        this.setState({\r\n          value: nextProps.initValue || ''\r\n        })\r\n    }\r\n  }\r\n\r\n\r\n  _handleClearInput = () => {\r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  _handleDbTouch = (ev) => {\r\n    const _ms = Date.now();\r\n    if (this._firstTouch) {\r\n      if (_ms - this._firstTouch<DB_TOUCH_PERIOD) {\r\n        this._firstTouch = 0\r\n        this._handleClearInput()\r\n      } else {\r\n        this._firstTouch = _ms\r\n      }\r\n    } else {\r\n      this._firstTouch = _ms\r\n    }\r\n  }\r\n\r\n  _handleFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _handleBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _handleInputChange = (event) => {\r\n    const { value } = event.target\r\n        , { onTest  } = this.props;\r\n    if (this.isOnTest) {\r\n      this.setState({\r\n        value, isPassTest: onTest(value)\r\n      })\r\n    } else {\r\n      this.setState({ value })\r\n    }\r\n  }\r\n _handleKeyDown = (event) => {\r\n   const { keyCode } = event;\r\n   if (keyCode === 46){\r\n     this.setState({ value: '' })\r\n   } else if (keyCode === 13 && this.isOnEnter) {\r\n     this.props.onEnter(event.target.value)\r\n   }\r\n }\r\n\r\n _ref = n => this.inputNode = n\r\n\r\n  render(){\r\n    const {\r\n            rootStyle, caption,\r\n            labelStyle, inputStyle,\r\n            accessKey, spellCheck,\r\n            errorMsg=''\r\n          } = this.props\r\n        , { value, isPassTest } = this.state\r\n        , _labelStyle = (value || this.isFocus)\r\n            ? undefined\r\n            : S.LABEL_TO_INPUT\r\n        , _labelErrStyle = (isPassTest)\r\n            ? undefined\r\n            : S.LABEL_ON_ERROR\r\n        , _lineStyle = (isPassTest)\r\n            ? undefined\r\n            : S.LINE_ERROR\r\n       , { cPrefix, cKey, cTail } = _crCaption(caption, accessKey);\r\n\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={rootStyle}\r\n        //onDoubleClick={this._handleClearInput}\r\n        onTouchStart={this._handleDbTouch}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{...labelStyle, ..._labelStyle, ..._labelErrStyle}}\r\n         >\r\n          {cPrefix}\r\n          <span style={S.KEY}>{cKey}</span>\r\n          {cTail}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            ref={this._ref}\r\n            type=\"text\"\r\n            className={CL.INPUT}\r\n            style={inputStyle}\r\n            value={value}\r\n            accessKey={accessKey}\r\n            autoComplete=\"new-text\"\r\n            autoCorrect=\"off\"\r\n            autoCapitalize=\"off\"\r\n            spellCheck={spellCheck}\r\n            translate=\"false\"\r\n            onFocus={this._handleFocusInput}\r\n            onBlur={this._handleBlurInput}\r\n            onChange={this._handleInputChange}\r\n            onKeyDown={this._handleKeyDown}\r\n          />\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          { _lineStyle && <div className={CL.INPUT_MSG_ERR}>{errorMsg}</div>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getValue(){\r\n    return String(this.state.value).trim();\r\n  }\r\n  focus(){\r\n    if (this.inputNode) {\r\n      this.inputNode.focus()\r\n      if (typeof this.inputNode.setSelectionRange === 'function') {\r\n        const len = this.state.value.length\r\n        this.inputNode.setSelectionRange(len, len)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TextField\r\n"]}