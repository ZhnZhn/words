{"version":3,"sources":["../../../src/components/zhn-m-input/PasswordField.jsx"],"names":["CL","SELECT","LABEL","DIV","INPUT","INPUT_LINE","INPUT_MSG_ERR","S","LABEL_TO_INPUT","transform","LABEL_ON_ERROR","color","LINE_ERROR","borderBottom","LINE_AFTER_ENTER","_crId","name","Math","random","toString","substr","PasswordField","props","_hFocusInput","isFocus","forceUpdate","_hBlurInput","_hInputChange","event","setState","value","target","trim","_clearAttrValue","_clearId","setTimeout","_input","hasAttribute","removeAttribute","_clearWasEnter","_wasEnter","_hKeyDown","keyCode","preventDefault","onEnter","_isValue","_refInput","node","_id","state","componentWillUnmound","clearTimeout","render","rootStyle","caption","maxLength","errorMsg","onTest","isPassTest","_labelStyle","_labelErrStyle","_lineStyle","componentDidUpdate","getValue","Component","defaultProps"],"mappings":"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","sourcesContent":["import { Component } from 'react'\r\n\r\nconst CL = {\r\n  SELECT: 'm-select',\r\n  LABEL: 'm-select__label',\r\n  DIV: 'm-textfield-input__div',\r\n  INPUT: 'm-textfield-input',\r\n  INPUT_LINE: 'm-input__line',\r\n  INPUT_MSG_ERR: 'm-input__msg-err'\r\n};\r\n\r\nconst S = {\r\n  LABEL_TO_INPUT: {\r\n     transform: 'scale(1) translate(0px, -6px)'\r\n  },\r\n  LABEL_ON_ERROR: {\r\n    color: '#f44336'\r\n  },\r\n  LINE_ERROR: {\r\n    borderBottom: '2px solid #f44336'\r\n  },\r\n  LINE_AFTER_ENTER: {\r\n    borderBottom: '2px solid greenyellow'\r\n  }\r\n};\r\n\r\nconst _crId = ({ name }) => name\r\n  + '_'\r\n  + Math.random().toString(36).substr(2, 5);\r\n\r\nclass PasswordField extends Component {\r\n  static defaultProps = {\r\n    name: 'pwd',\r\n    maxLength: \"32\",\r\n    onTest: () => true,\r\n    onEnter: () => {}\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this._wasEnter = false\r\n    this.isFocus = false;\r\n    this._id = _crId(props)\r\n    this.state = {\r\n      value: ''\r\n    }\r\n  }\r\n\r\n  componentWillUnmound() {\r\n    clearTimeout(this._clearId)\r\n  }\r\n\r\n  _hFocusInput = () => {\r\n    this.isFocus = true\r\n    this.forceUpdate()\r\n  }\r\n  _hBlurInput = () => {\r\n    this.isFocus = false\r\n    this.forceUpdate()\r\n  }\r\n\r\n  _hInputChange = (event) => {\r\n    this.setState({\r\n      value: event.target.value.trim(),\r\n    })\r\n  }\r\n\r\n  _clearAttrValue = () => {\r\n    this._clearId = setTimeout(() => {\r\n      const _input = this._input;\r\n      if (_input && _input.hasAttribute('value')) {\r\n        _input.removeAttribute('value')\r\n      }\r\n    })\r\n  }\r\n\r\n  _clearWasEnter = () => {\r\n    this._wasEnter = false\r\n  }\r\n\r\n _hKeyDown = (event) => {\r\n   if (event.keyCode === 46){\r\n     this.setState({ value: '' })\r\n   } else if (event.keyCode === 13) {\r\n     event.preventDefault()\r\n     this.props.onEnter(event.target.value)\r\n     this._wasEnter = true\r\n     this.forceUpdate(this._clearWasEnter)\r\n   }\r\n }\r\n _isValue = () => {\r\n    return this._input\r\n       ? !!this._input.value\r\n       : false;\r\n }\r\n\r\n _refInput = node => this._input = node\r\n\r\n  render(){\r\n    const {\r\n        rootStyle, caption,\r\n        name,\r\n        maxLength, errorMsg='',\r\n        onTest\r\n      } = this.props\r\n    , { value } = this.state\r\n    , isPassTest = onTest(value)\r\n    , _labelStyle = (this._isValue() || this.isFocus)\r\n        ? null\r\n        : S.LABEL_TO_INPUT\r\n    , _labelErrStyle = isPassTest\r\n        ? null\r\n        : S.LABEL_ON_ERROR\r\n    , _lineStyle = isPassTest\r\n        ? this._wasEnter\r\n             ? S.LINE_AFTER_ENTER\r\n             : void 0\r\n        : S.LINE_ERROR;\r\n    return (\r\n      <div\r\n        className={CL.SELECT}\r\n        style={rootStyle}\r\n      >\r\n        <label\r\n          className={CL.LABEL}\r\n          style={{..._labelStyle, ..._labelErrStyle}}\r\n          htmlFor={this._id}\r\n         >\r\n          {caption}\r\n        </label>\r\n        <div className={CL.DIV}>\r\n          <input\r\n            hidden={true}\r\n            autoComplete=\"username\"\r\n            value={name}\r\n            readOnly={true}\r\n          />\r\n          <input\r\n            ref = {this._refInput}\r\n            id={this._id}\r\n            type=\"password\"\r\n            autoComplete=\"current-password\"\r\n            className={CL.INPUT}\r\n            maxLength={maxLength}\r\n            value={value}\r\n            onChange={this._hInputChange}\r\n            onKeyDown={this._hKeyDown}\r\n            onFocus={this._hFocusInput}\r\n            onBlur={this._hBlurInput}\r\n          />\r\n          <div className={CL.INPUT_LINE} style={_lineStyle} />\r\n          {\r\n             !isPassTest && <div className={CL.INPUT_MSG_ERR}>\r\n                 {errorMsg}\r\n               </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this._clearAttrValue()\r\n  }\r\n\r\n  getValue(){\r\n    return this._input && this._input.value;\r\n  }\r\n}\r\n\r\nexport default PasswordField\r\n"],"file":"PasswordField.js"}