{"version":3,"sources":["../../../src/components/header/ProgressLoading.jsx"],"names":["C","LOADING","FAILED","ProgressLoading","state","completed","color","_onStore","actionType","ACTIONS","props","setState","LOADING_COMPLETE","LOADING_FAILED","unsubscribe","store","listenLoading","nextProps","nextState"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;;;AAEA,IAAMA,IAAI;AACRC,WAAU,SADF;AAERC,UAAS;AAFD,CAAV;;IAKMC,e;;;;;;;;;;;;;;sNACJC,K,GAAQ;AACNC,iBAAW,CADL;AAENC,aAAON,EAAEC;AAFH,K,QAoBRM,Q,GAAW,UAACC,UAAD,EAAgB;AAAA,UACfC,OADe,GACH,MAAKC,KADF,CACfD,OADe;;AAEvB,UAAID,eAAeC,QAAQR,OAA3B,EAAmC;AACjC,cAAKU,QAAL,CAAc,EAAEN,WAAW,EAAb,EAAiBC,OAAON,EAAEC,OAA1B,EAAd;AACD,OAFD,MAEO,IAAIO,eAAeC,QAAQG,gBAA3B,EAA4C;AACjD,cAAKD,QAAL,CAAc,EAAEN,WAAW,GAAb,EAAkBC,OAAON,EAAEC,OAA3B,EAAd;AACD,OAFM,MAEA,IAAIO,eAAeC,QAAQI,cAA3B,EAA0C;AAC/C,cAAKF,QAAL,CAAc,EAAEN,WAAW,GAAb,EAAkBC,OAAON,EAAEE,MAA3B,EAAd;AACD;AACJ,K;;;;;wCAxBkB;AACjB,WAAKY,WAAL,GAAmB,KAAKJ,KAAL,CAAWK,KAAX,CAChBC,aADgB,CACF,KAAKT,QADH,CAAnB;AAED;;;2CACqB;AACpB,WAAKO,WAAL;AACD;;;0CAEqBG,S,EAAWC,S,EAAU;AACzC,UAAI,KAAKd,KAAL,CAAWC,SAAX,KAAyBa,UAAUb,SAAvC,EAAkD;AAChD,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;6BAaO;AAAA,mBACuB,KAAKD,KAD5B;AAAA,UACEC,SADF,UACEA,SADF;AAAA,UACaC,KADb,UACaA,KADb;;AAEN,aACE;AACG,gBAAQ,CADX;AAEG,eAAOA,KAFV;AAGG,mBAAWD;AAHd,QADF;AAOD;;;;;kBAGYF,e","file":"ProgressLoading.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ProgressLine from '../zhn-atoms/ProgressLine';\r\n\r\nconst C = {\r\n  LOADING : '#2f7ed8',\r\n  FAILED : '#ed5813'\r\n};\r\n\r\nclass ProgressLoading extends Component {\r\n  state = {\r\n    completed: 0,\r\n    color: C.LOADING\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listenLoading(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.state.completed === nextState.completed) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _onStore = (actionType) => {\r\n      const { ACTIONS } = this.props;\r\n      if (actionType === ACTIONS.LOADING){\r\n        this.setState({ completed: 35, color: C.LOADING })\r\n      } else if (actionType === ACTIONS.LOADING_COMPLETE){\r\n        this.setState({ completed: 100, color: C.LOADING })\r\n      } else if (actionType === ACTIONS.LOADING_FAILED){\r\n        this.setState({ completed: 100, color: C.FAILED })\r\n      }\r\n  }\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressLoading\r\n"]}