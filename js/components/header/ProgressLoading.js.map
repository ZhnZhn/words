{"version":3,"sources":["../../../src/components/header/ProgressLoading.jsx"],"names":["C","LOADING","FAILED","ProgressLoading","state","completed","color","_onStore","actionType","ACTIONS","props","setState","LOADING_COMPLETE","LOADING_FAILED","componentDidMount","unsubscribe","store","listenLoading","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","render","Component"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA,IAAMA,CAAC,GAAG;AACRC,EAAAA,OAAO,EAAG,SADF;AAERC,EAAAA,MAAM,EAAG;AAFD,CAAV;;IAKMC,e;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,SAAS,EAAE,CADL;AAENC,MAAAA,KAAK,EAAEN,CAAC,CAACC;AAFH,K;;UAoBRM,Q,GAAW,UAACC,UAAD,EAAgB;AAAA,UACfC,OADe,GACH,MAAKC,KADF,CACfD,OADe;;AAEvB,UAAID,UAAU,KAAKC,OAAO,CAACR,OAA3B,EAAmC;AACjC,cAAKU,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,EAAb;AAAiBC,UAAAA,KAAK,EAAEN,CAAC,CAACC;AAA1B,SAAd;AACD,OAFD,MAEO,IAAIO,UAAU,KAAKC,OAAO,CAACG,gBAA3B,EAA4C;AACjD,cAAKD,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,KAAK,EAAEN,CAAC,CAACC;AAA3B,SAAd;AACD,OAFM,MAEA,IAAIO,UAAU,KAAKC,OAAO,CAACI,cAA3B,EAA0C;AAC/C,cAAKF,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE,GAAb;AAAkBC,UAAAA,KAAK,EAAEN,CAAC,CAACE;AAA3B,SAAd;AACD;AACJ,K;;;;;;;SAxBDY,iB,GAAA,6BAAmB;AACjB,SAAKC,WAAL,GAAmB,KAAKL,KAAL,CAAWM,KAAX,CAChBC,aADgB,CACF,KAAKV,QADH,CAAnB;AAED,G;;SACDW,oB,GAAA,gCAAsB;AACpB,SAAKH,WAAL;AACD,G;;SAEDI,qB,GAAA,+BAAsBC,SAAtB,EAAiCC,SAAjC,EAA2C;AACzC,QAAI,KAAKjB,KAAL,CAAWC,SAAX,KAAyBgB,SAAS,CAAChB,SAAvC,EAAkD;AAChD,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,G;;SAaDiB,M,GAAA,kBAAQ;AAAA,sBACuB,KAAKlB,KAD5B;AAAA,QACEC,SADF,eACEA,SADF;AAAA,QACaC,KADb,eACaA,KADb;AAEN,WACE,gCAAC,wBAAD;AACG,MAAA,MAAM,EAAE,CADX;AAEG,MAAA,KAAK,EAAEA,KAFV;AAGG,MAAA,SAAS,EAAED;AAHd,MADF;AAOD,G;;;EAzC2BkB,gB;;eA4CfpB,e","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport ProgressLine from '../zhn-atoms/ProgressLine';\r\n\r\nconst C = {\r\n  LOADING : '#2f7ed8',\r\n  FAILED : '#ed5813'\r\n};\r\n\r\nclass ProgressLoading extends Component {\r\n  state = {\r\n    completed: 0,\r\n    color: C.LOADING\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listenLoading(this._onStore);\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState){\r\n    if (this.state.completed === nextState.completed) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  _onStore = (actionType) => {\r\n      const { ACTIONS } = this.props;\r\n      if (actionType === ACTIONS.LOADING){\r\n        this.setState({ completed: 35, color: C.LOADING })\r\n      } else if (actionType === ACTIONS.LOADING_COMPLETE){\r\n        this.setState({ completed: 100, color: C.LOADING })\r\n      } else if (actionType === ACTIONS.LOADING_FAILED){\r\n        this.setState({ completed: 100, color: C.FAILED })\r\n      }\r\n  }\r\n\r\n  render(){\r\n    const { completed, color } = this.state;\r\n    return (\r\n      <ProgressLine\r\n         height={3}\r\n         color={color}\r\n         completed={completed}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressLoading\r\n"],"file":"ProgressLoading.js"}