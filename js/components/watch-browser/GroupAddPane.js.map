{"version":3,"sources":["../../../src/components/watch-browser/GroupAddPane.jsx"],"names":["GroupAddPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","_handleClear","setState","validationMessages","messages","inputText","setValue","state","length","_handleCreate","onCreate","msgOnIsEmptyName","caption","getValue","_crPrimaryBt","btStyle","_refInputText","c","unsubscribe","store","listen","inputStyle","onClose"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;;;;;IAEMA,Y;;;AACJ;;;;;;;;;;;;;;;;;AAkBA,wBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAAA,UAclBC,QAdkB,GAcP,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAAA,wBAC0B,MAAKH,KAD/B;AAAA,UACvBI,eADuB,eACvBA,eADuB;AAAA,UACNC,YADM,eACNA,YADM;AAAA,UACQC,aADR,eACQA,aADR;;AAE/B,UAAIJ,eAAeE,eAAf,IAAkCD,KAAKG,aAAL,KAAuBA,aAA7D,EAA2E;AACxE,cAAKC,YAAL;AACF,OAFD,MAEO,IAAIL,eAAeG,YAAf,IAA+BF,KAAKG,aAAL,KAAuBA,aAA1D,EAAwE;AAC5E,cAAKE,QAAL,CAAc,EAAEC,oBAAoBN,KAAKO,QAA3B,EAAd;AACF;AACF,KArBiB;;AAAA,UAuBlBH,YAvBkB,GAuBH,YAAM;AACnB,YAAKI,SAAL,CAAeC,QAAf,CAAwB,EAAxB;AACA,UAAI,MAAKC,KAAL,CAAWJ,kBAAX,CAA8BK,MAA9B,GAAqC,CAAzC,EAA2C;AACxC,cAAKN,QAAL,CAAc,EAAEC,oBAAoB,EAAtB,EAAd;AACF;AACF,KA5BiB;;AAAA,UA8BlBM,aA9BkB,GA8BF,YAAM;AAAA,yBACoB,MAAKf,KADzB;AAAA,UACXgB,QADW,gBACXA,QADW;AAAA,UACDC,gBADC,gBACDA,gBADC;AAAA,UAEZC,OAFY,GAEF,MAAKP,SAAL,CAAeQ,QAAf,EAFE;;AAGnB,UAAID,OAAJ,EAAY;AACVF,iBAAS,EAAEE,gBAAF,EAAT;AACD,OAFD,MAEO;AACL,cAAKP,SAAL,CAAeC,QAAf,CAAwB,EAAxB;AACA,cAAKJ,QAAL,CAAc,EAAEC,oBAAmB,CAACQ,iBAAiB,OAAjB,CAAD,CAArB,EAAd;AACD;AACH,KAvCiB;;AAAA,UA0ClBG,YA1CkB,GA0CH,UAACC,OAAD,EAAa;AAC1B,aACE,8CAAG,MAAH,CAAU,OAAV;AACG,eAAOA,OADV;AAEG,iBAAQ,QAFX;AAGG,eAAM,kBAHT;AAIG,iBAAS,MAAKN;AAJjB,QADF;AAQD,KAnDiB;;AAAA,UAsDlBO,aAtDkB,GAsDF;AAAA,aAAK,MAAKX,SAAL,GAAiBY,CAAtB;AAAA,KAtDE;;AAEhB,UAAKV,KAAL,GAAa;AACXJ,0BAAqB;AADV,KAAb;AAFgB;AAKjB;;;;wCAEkB;AACjB,WAAKe,WAAL,GAAmB,KAAKxB,KAAL,CAAWyB,KAAX,CAChBC,MADgB,CACT,KAAKzB,QADI,CAAnB;AAED;;;2CACqB;AACpB,WAAKuB,WAAL;AACD;;;6BA2CO;AAAA,mBACmC,KAAKxB,KADxC;AAAA,UACE2B,UADF,UACEA,UADF;AAAA,UACcN,OADd,UACcA,OADd;AAAA,UACuBO,OADvB,UACuBA,OADvB;AAAA,UAEEnB,kBAFF,GAEyB,KAAKI,KAF9B,CAEEJ,kBAFF;;AAGN,aACE;AAAA;AAAA;AACE,sDAAG,YAAH;AACG,eAAK,KAAKa,aADb;AAEG,mBAAQ,QAFX;AAGG,sBAAYK;AAHf,UADF;AAME,sDAAG,kBAAH;AACG,8BAAoBlB;AADvB,UANF;AASG,sDAAG,UAAH;AACG,mBAASY,OADZ;AAEG,mBAAS,KAAKD,YAAL,CAAkBC,OAAlB,CAFZ;AAGG,mBAAS,KAAKd,YAHjB;AAIG,mBAASqB;AAJZ;AATH,OADF;AAkBD;;;;AApGH;;kBAuGe7B,Y","file":"GroupAddPane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass GroupAddPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    actionFailed: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    msgOnIsEmptyName: PropTypes.func,\r\n\r\n    inputStyle: PropTypes.object,\r\n    btStyle: PropTypes.object,\r\n    \r\n    onCreate: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      validationMessages : []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType } = this.props;\r\n    if (actionType === actionCompleted && data.forActionType === forActionType){\r\n       this._handleClear()\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n       this.setState({ validationMessages: data.messages })\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n    this.inputText.setValue('')\r\n    if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages: [] })\r\n    }\r\n  }\r\n\r\n  _handleCreate = () => {\r\n     const { onCreate, msgOnIsEmptyName } = this.props\r\n          , caption = this.inputText.getValue();\r\n     if (caption){\r\n       onCreate({ caption })\r\n     } else {\r\n       this.inputText.setValue('')\r\n       this.setState({ validationMessages:[msgOnIsEmptyName('Group')] })\r\n     }\r\n  }\r\n\r\n\r\n  _crPrimaryBt = (btStyle) => {\r\n    return (\r\n      <A.Button.Primary\r\n         style={btStyle}\r\n         caption=\"Create\"\r\n         title=\"Create New Group\"\r\n         onClick={this._handleCreate}\r\n     />\r\n    );\r\n  }\r\n\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const { inputStyle, btStyle, onClose } = this.props\r\n        , { validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n        <A.RowInputText\r\n           ref={this._refInputText}\r\n           caption=\"Group:\"\r\n           inputStyle={inputStyle}\r\n        />\r\n        <A.ValidationMessages\r\n           validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n            btStyle={btStyle}\r\n            Primary={this._crPrimaryBt(btStyle)}\r\n            onClear={this._handleClear}\r\n            onClose={onClose}\r\n         />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GroupAddPane\r\n"]}