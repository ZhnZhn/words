{"version":3,"sources":["../../../src/components/watch-browser/ListCreatePane.jsx"],"names":["ListCreatePane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","isUpdateGroup","_handleClear","setState","groupOptions","getWatchGroups","validationMessages","messages","_handleSelectGroup","item","caption","captionGroup","inputText","setValue","state","length","_handleCreate","onCreate","msgOnNotSelect","msgOnIsEmptyName","captionList","getValue","msg","push","_crPrimaryBt","btStyle","_refInputText","c","componentDidMount","unsubscribe","listen","componentWillUnmount","render","inputStyle","onClose","Component"],"mappings":";;;;;;;;;AAAA;;AAGA;;;;AAFA;IAIMA,c;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE,0BAAYC,KAAZ,EAAkB;AAAA;;AAChB,kCAAMA,KAAN;;AADgB,UAiBlBC,QAjBkB,GAiBP,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAAA,wBACiC,MAAKH,KADtC;AAAA,UACvBI,eADuB,eACvBA,eADuB;AAAA,UACNC,YADM,eACNA,YADM;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,KADvB,eACuBA,KADvB;;AAE/B,UAAIL,UAAU,KAAKE,eAAnB,EAAmC;AAC/B,YAAII,aAAa,GAAG,IAApB;;AACA,YAAIL,IAAI,CAACG,aAAL,KAAuBA,aAA3B,EAAyC;AACvC,gBAAKG,YAAL;;AACAD,UAAAA,aAAa,GAAG,KAAhB;AACD;;AACD,cAAKE,QAAL,CAAc;AACXC,UAAAA,YAAY,EAAEJ,KAAK,CAACK,cAAN,EADH;AAEXJ,UAAAA,aAAa,EAAbA;AAFW,SAAd;AAIH,OAVD,MAUO,IAAIN,UAAU,KAAKG,YAAf,IAA+BF,IAAI,CAACG,aAAL,KAAuBA,aAA1D,EAAwE;AAC7E,cAAKI,QAAL,CAAc;AACZG,UAAAA,kBAAkB,EAAEV,IAAI,CAACW,QADb;AAEZN,UAAAA,aAAa,EAAC;AAFF,SAAd;AAID;AACF,KAnCiB;;AAAA,UAqClBO,kBArCkB,GAqCG,UAACC,IAAD,EAAU;AAC7B,UAAIA,IAAI,IAAIA,IAAI,CAACC,OAAjB,EAAyB;AACvB,cAAKC,YAAL,GAAoBF,IAAI,CAACC,OAAzB;AACD,OAFD,MAEO;AACL,cAAKC,YAAL,GAAoB,IAApB;AACD;AACF,KA3CiB;;AAAA,UA6ClBT,YA7CkB,GA6CH,YAAM;AAClB,YAAKU,SAAL,CAAeC,QAAf,CAAwB,EAAxB;;AACA,UAAI,MAAKC,KAAL,CAAWR,kBAAX,CAA8BS,MAA9B,GAAqC,CAAzC,EAA2C;AACzC,cAAKZ,QAAL,CAAc;AAAEG,UAAAA,kBAAkB,EAAE,EAAtB;AAA0BL,UAAAA,aAAa,EAAC;AAAxC,SAAd;AACD;AACH,KAlDiB;;AAAA,UAoDlBe,aApDkB,GAoDF,YAAM;AAAA,yBACoC,MAAKvB,KADzC;AAAA,UACXwB,QADW,gBACXA,QADW;AAAA,UACDC,cADC,gBACDA,cADC;AAAA,UACeC,gBADf,gBACeA,gBADf;AAAA,UAEbC,WAFa,GAEC,MAAKR,SAAL,CAAeS,QAAf,EAFD;;AAGnB,UAAI,MAAKV,YAAL,IAAqBS,WAAzB,EAAqC;AACnCH,QAAAA,QAAQ,CAAC;AACNN,UAAAA,YAAY,EAAG,MAAKA,YADd;AAENS,UAAAA,WAAW,EAAGA;AAFR,SAAD,CAAR;AAID,OALD,MAKO;AACL,YAAME,GAAG,GAAG,EAAZ;;AACA,YAAI,CAAC,MAAKX,YAAV,EAAwB;AAAEW,UAAAA,GAAG,CAACC,IAAJ,CAASL,cAAc,CAAC,UAAD,CAAvB;AAAuC;;AACjE,YAAI,CAACE,WAAL,EAAwB;AAAEE,UAAAA,GAAG,CAACC,IAAJ,CAASJ,gBAAgB,CAAC,MAAD,CAAzB;AAAqC;;AAC/D,cAAKhB,QAAL,CAAc;AAAEG,UAAAA,kBAAkB,EAACgB,GAArB;AAA0BrB,UAAAA,aAAa,EAAC;AAAxC,SAAd;AACD;AACH,KAlEiB;;AAAA,UAoElBuB,YApEkB,GAoEH,UAACC,OAAD,EAAa;AAC1B,0BACE,qBAAC,iBAAD,CAAG,MAAH,CAAU,OAAV;AACG,QAAA,KAAK,EAAEA,OADV;AAEG,QAAA,OAAO,EAAC,QAFX;AAGG,QAAA,KAAK,EAAC,iBAHT;AAIG,QAAA,OAAO,EAAE,MAAKT;AAJjB,QADF;AAQD,KA7EiB;;AAAA,UA+ElBU,aA/EkB,GA+EF,UAAAC,CAAC;AAAA,aAAI,MAAKf,SAAL,GAAiBe,CAArB;AAAA,KA/EC;;AAEhB,UAAKhB,YAAL,GAAoB,IAApB;AACA,UAAKG,KAAL,GAAa;AACXV,MAAAA,YAAY,EAAEX,KAAK,CAACO,KAAN,CAAYK,cAAZ,EADH;AAEXJ,MAAAA,aAAa,EAAE,KAFJ;AAGXK,MAAAA,kBAAkB,EAAE;AAHT,KAAb;AAHgB;AAQjB;;;;SAEDsB,iB,GAAA,6BAAmB;AACjB,SAAKC,WAAL,GAAmB,KAAKpC,KAAL,CAAWO,KAAX,CACf8B,MADe,CACR,KAAKpC,QADG,CAAnB;AAED,G;;SACDqC,oB,GAAA,gCAAsB;AACpB,SAAKF,WAAL;AACD,G;;SAiEDG,M,GAAA,kBAAQ;AAAA,uBAII,KAAKvC,KAJT;AAAA,QAEEwC,UAFF,gBAEEA,UAFF;AAAA,QAEcR,OAFd,gBAEcA,OAFd;AAAA,QAGES,OAHF,gBAGEA,OAHF;AAAA,sBAKuC,KAAKpB,KAL5C;AAAA,QAKEV,YALF,eAKEA,YALF;AAAA,QAKgBE,kBALhB,eAKgBA,kBALhB;AAMN,wBACE;AAAA,8BACE,qBAAC,iBAAD,CAAG,cAAH;AACG,QAAA,UAAU,EAAE2B,UADf;AAEG,QAAA,OAAO,EAAC,WAFX;AAGG,QAAA,OAAO,EAAE7B,YAHZ;AAIG,QAAA,QAAQ,EAAE,KAAKI;AAJlB,QADF,eAOE,qBAAC,iBAAD,CAAG,YAAH;AACG,QAAA,GAAG,EAAE,KAAKkB,aADb;AAEG,QAAA,UAAU,EAAEO,UAFf;AAGG,QAAA,OAAO,EAAC;AAHX,QAPF,eAYE,qBAAC,iBAAD,CAAG,kBAAH;AACE,QAAA,kBAAkB,EAAE3B;AADtB,QAZF,eAeE,qBAAC,iBAAD,CAAG,UAAH;AACG,QAAA,OAAO,EAAEmB,OADZ;AAEG,QAAA,OAAO,EAAE,KAAKD,YAAL,CAAkBC,OAAlB,CAFZ;AAGG,QAAA,OAAO,EAAE,KAAKvB,YAHjB;AAIG,QAAA,OAAO,EAAEgC;AAJZ,QAfF;AAAA,MADF;AAwBD,G;;;EApI0BC,gB;;eAuId3C,c","sourcesContent":["import { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass ListCreatePane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    actionFailed: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n    msgOnNotSelect: PropTypes.func,\r\n    msgOnIsEmptyName: PropTypes.func,\r\n\r\n    inputStyle: PropTypes.object,\r\n    btStyle: PropTypes.object,\r\n\r\n    onCreate: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.captionGroup = null\r\n    this.state = {\r\n      groupOptions: props.store.getWatchGroups(),\r\n      isUpdateGroup: false,\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n       .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType, store } = this.props;\r\n    if (actionType === actionCompleted){\r\n        let isUpdateGroup = true;\r\n        if (data.forActionType === forActionType){\r\n          this._handleClear()\r\n          isUpdateGroup = false\r\n        }\r\n        this.setState({\r\n           groupOptions: store.getWatchGroups(),\r\n           isUpdateGroup\r\n        });\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({\r\n        validationMessages: data.messages,\r\n        isUpdateGroup:false\r\n      })\r\n    }\r\n  }\r\n\r\n  _handleSelectGroup = (item) => {\r\n    if (item && item.caption){\r\n      this.captionGroup = item.caption\r\n    } else {\r\n      this.captionGroup = null\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n     this.inputText.setValue('')\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages: [], isUpdateGroup:false })\r\n     }\r\n  }\r\n\r\n  _handleCreate = () => {\r\n     const { onCreate, msgOnNotSelect, msgOnIsEmptyName } = this.props\r\n         , captionList = this.inputText.getValue();\r\n     if (this.captionGroup && captionList){\r\n       onCreate({\r\n          captionGroup : this.captionGroup,\r\n          captionList : captionList\r\n       });\r\n     } else {\r\n       const msg = [];\r\n       if (!this.captionGroup) { msg.push(msgOnNotSelect('In Group')); }\r\n       if (!captionList)       { msg.push(msgOnIsEmptyName('List')); }\r\n       this.setState({ validationMessages:msg, isUpdateGroup:false });\r\n     }\r\n  }\r\n\r\n  _crPrimaryBt = (btStyle) => {\r\n    return (\r\n      <A.Button.Primary\r\n         style={btStyle}\r\n         caption=\"Create\"\r\n         title=\"Create New List\"\r\n         onClick={this._handleCreate}\r\n      />\r\n    );\r\n  }\r\n\r\n  _refInputText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {\r\n            inputStyle, btStyle,\r\n            onClose\r\n          } = this.props\r\n        , { groupOptions, validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n        <A.RowInputSelect\r\n           inputStyle={inputStyle}\r\n           caption=\"In Group:\"\r\n           options={groupOptions}\r\n           onSelect={this._handleSelectGroup}\r\n        />\r\n        <A.RowInputText\r\n           ref={this._refInputText}\r\n           inputStyle={inputStyle}\r\n           caption=\"List:\"\r\n        />\r\n        <A.ValidationMessages\r\n          validationMessages={validationMessages}\r\n        />\r\n        <A.RowButtons\r\n           btStyle={btStyle}\r\n           Primary={this._crPrimaryBt(btStyle)}\r\n           onClear={this._handleClear}\r\n           onClose={onClose}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ListCreatePane\r\n"],"file":"ListCreatePane.js"}