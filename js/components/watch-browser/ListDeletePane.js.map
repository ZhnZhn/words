{"version":3,"sources":["../../../src/components/watch-browser/ListDeletePane.jsx"],"names":["ListDeletePane","props","_onStore","actionType","data","actionCompleted","forActionType","store","_handleClear","setState","groupOptions","getWatchGroups","state","validationMessages","length","_handleDelete","onDelete","msgOnNotSelect","selectGroupList","getValue","captionGroup","captionList","msg","push","_crPrimaryBt","btStyle","_ref","c","unsubscribe","listen","inputStyle","onClose"],"mappings":"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","file":"ListDeletePane.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass ListDeletePane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n\r\n    inputStyle: PropTypes.object,\r\n    btStyle: PropTypes.object,\r\n\r\n    onRename: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super()\r\n    this.state = {\r\n      groupOptions: props.store.getWatchGroups(),\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, forActionType, store } = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType) {\r\n          this._handleClear()\r\n        }\r\n        this.setState({ groupOptions : store.getWatchGroups() })\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n    if (this.state.validationMessages.length>0){\r\n      this.setState({ validationMessages: [] })\r\n    }\r\n  }\r\n\r\n  _handleDelete = () => {\r\n      const { onDelete, msgOnNotSelect } = this.props\r\n          , { captionGroup, captionList } = this.selectGroupList.getValue();\r\n      if (captionGroup && captionList){\r\n        onDelete({ captionGroup, captionList })\r\n      } else {\r\n        const msg = [];\r\n        if (!captionGroup) { msg.push(msgOnNotSelect('Group')) }\r\n        if (!captionList)  { msg.push(msgOnNotSelect('List'))  }\r\n        this.setState({ validationMessages: msg })\r\n      }\r\n  }\r\n\r\n  _crPrimaryBt = (btStyle) => {\r\n    return (\r\n      <A.Button.Primary\r\n         style={btStyle}\r\n         caption=\"Delete\"\r\n         title=\"Delete List\"\r\n         onClick={this._handleDelete}\r\n      />\r\n    );\r\n  }\r\n\r\n  _ref = c => this.selectGroupList = c\r\n\r\n  render(){\r\n    const {\r\n            store,\r\n            inputStyle, btStyle,\r\n            onClose\r\n          } = this.props\r\n        , { groupOptions, validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n         <A.FragmentSelectGroupList\r\n           ref={this._ref}\r\n           store={store}\r\n           inputStyle={inputStyle}           \r\n           groupCaption=\"In Group:\"\r\n           groupOptions={groupOptions}\r\n           listCaption=\"List:\"\r\n         />\r\n         <A.ValidationMessages\r\n            validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n           btStyle={btStyle}\r\n           Primary={this._crPrimaryBt(btStyle)}\r\n           onClear={this._handleClear}\r\n           onClose={onClose}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListDeletePane\r\n"]}