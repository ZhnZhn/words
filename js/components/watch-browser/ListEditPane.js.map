{"version":3,"sources":["../../../src/components/watch-browser/ListEditPane.jsx"],"names":["ListEditPane","props","_onStore","actionType","data","actionCompleted","actionFailed","forActionType","store","_handleClear","setState","groupOptions","getWatchGroups","validationMessages","messages","inputText","setValue","state","length","_handleRename","onRename","msgOnIsEmptyName","msgOnNotSelect","selectGroupList","getValue","captionGroup","captionList","captionListTo","captionListFrom","msg","push","_crPrimaryBt","btStyle","_refGroup","c","_refText","listOptions","componentDidMount","unsubscribe","listen","componentWillUnmount","render","inputStyle","onClose","Component"],"mappings":";;;;;;;;;AAAA;;AAGA;;;;AAFA;IAIMA,Y;;;AACJ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIE,wBAAYC,KAAZ,EAAkB;AAAA;;AAChB,kCAAMA,KAAN;;AADgB,UAgBlBC,QAhBkB,GAgBP,UAACC,UAAD,EAAaC,IAAb,EAAsB;AAAA,wBACiC,MAAKH,KADtC;AAAA,UACvBI,eADuB,eACvBA,eADuB;AAAA,UACNC,YADM,eACNA,YADM;AAAA,UACQC,aADR,eACQA,aADR;AAAA,UACuBC,KADvB,eACuBA,KADvB;;AAE/B,UAAIL,UAAU,KAAKE,eAAnB,EAAmC;AAC/B,YAAID,IAAI,CAACG,aAAL,KAAuBA,aAA3B,EAAyC;AACvC,gBAAKE,YAAL;AACD;;AACD,cAAKC,QAAL,CAAc;AAAEC,UAAAA,YAAY,EAAGH,KAAK,CAACI,cAAN;AAAjB,SAAd;AACH,OALD,MAKO,IAAIT,UAAU,KAAKG,YAAf,IAA+BF,IAAI,CAACG,aAAL,KAAuBA,aAA1D,EAAwE;AAC7E,cAAKG,QAAL,CAAc;AAAEG,UAAAA,kBAAkB,EAACT,IAAI,CAACU;AAA1B,SAAd;AACD;AACF,KA1BiB;;AAAA,UA4BlBL,YA5BkB,GA4BH,YAAM;AAClB,YAAKM,SAAL,CAAeC,QAAf,CAAwB,EAAxB;;AACA,UAAI,MAAKC,KAAL,CAAWJ,kBAAX,CAA8BK,MAA9B,GAAqC,CAAzC,EAA2C;AACzC,cAAKR,QAAL,CAAc;AAAEG,UAAAA,kBAAkB,EAAC;AAArB,SAAd;AACD;AACH,KAjCiB;;AAAA,UAmClBM,aAnCkB,GAmCF,YAAM;AAAA,yBACmC,MAAKlB,KADxC;AAAA,UACZmB,QADY,gBACZA,QADY;AAAA,UACFC,gBADE,gBACFA,gBADE;AAAA,UACgBC,cADhB,gBACgBA,cADhB;AAAA,kCAEkB,MAAKC,eAAL,CAAqBC,QAArB,EAFlB;AAAA,UAEZC,YAFY,yBAEZA,YAFY;AAAA,UAEEC,WAFF,yBAEEA,WAFF;AAAA,UAGdC,aAHc,GAGE,MAAKZ,SAAL,CAAeS,QAAf,EAHF;;AAIpB,UAAIC,YAAY,IAAIC,WAAhB,IAA+BC,aAAnC,EAAiD;AAC/CP,QAAAA,QAAQ,CAAC;AACPK,UAAAA,YAAY,EAAEA,YADP;AAEPG,UAAAA,eAAe,EAAEF,WAFV;AAGPC,UAAAA,aAAa,EAAEA;AAHR,SAAD,CAAR;AAKD,OAND,MAMO;AACL,YAAME,GAAG,GAAG,EAAZ;;AACA,YAAI,CAACJ,YAAL,EAAmB;AAAEI,UAAAA,GAAG,CAACC,IAAJ,CAASR,cAAc,CAAC,OAAD,CAAvB;AAAmC;;AACxD,YAAI,CAACI,WAAL,EAAmB;AAAEG,UAAAA,GAAG,CAACC,IAAJ,CAASR,cAAc,CAAC,WAAD,CAAvB;AAAuC;;AAC5D,YAAI,CAACK,aAAL,EAAmB;AAAEE,UAAAA,GAAG,CAACC,IAAJ,CAAST,gBAAgB,CAAC,SAAD,CAAzB;AAAuC;;AAC5D,cAAKX,QAAL,CAAc;AAAEG,UAAAA,kBAAkB,EAACgB;AAArB,SAAd;AACD;AACF,KApDiB;;AAAA,UAsDlBE,YAtDkB,GAsDH,UAACC,OAAD,EAAa;AAC1B,0BACE,qBAAC,iBAAD,CAAG,MAAH,CAAU,OAAV;AACG,QAAA,KAAK,EAAEA,OADV;AAEG,QAAA,OAAO,EAAC,MAFX;AAGG,QAAA,KAAK,EAAC,gBAHT;AAIG,QAAA,OAAO,EAAE,MAAKb;AAJjB,QADF;AAQD,KA/DiB;;AAAA,UAiElBc,SAjEkB,GAiEN,UAAAC,CAAC;AAAA,aAAI,MAAKX,eAAL,GAAuBW,CAA3B;AAAA,KAjEK;;AAAA,UAkElBC,QAlEkB,GAkEP,UAAAD,CAAC;AAAA,aAAI,MAAKnB,SAAL,GAAiBmB,CAArB;AAAA,KAlEM;;AAEhB,UAAKjB,KAAL,GAAa;AACXN,MAAAA,YAAY,EAAEV,KAAK,CAACO,KAAN,CAAYI,cAAZ,EADH;AAEXwB,MAAAA,WAAW,EAAE,EAFF;AAGXvB,MAAAA,kBAAkB,EAAE;AAHT,KAAb;AAFgB;AAOjB;;;;SAEDwB,iB,GAAA,6BAAmB;AACjB,SAAKC,WAAL,GAAmB,KAAKrC,KAAL,CAAWO,KAAX,CAChB+B,MADgB,CACT,KAAKrC,QADI,CAAnB;AAED,G;;SACDsC,oB,GAAA,gCAAsB;AACpB,SAAKF,WAAL;AACD,G;;SAqDDG,M,GAAA,kBAAQ;AAAA,uBAKI,KAAKxC,KALT;AAAA,QAEEO,KAFF,gBAEEA,KAFF;AAAA,QAGEkC,UAHF,gBAGEA,UAHF;AAAA,QAGcV,OAHd,gBAGcA,OAHd;AAAA,QAIEW,OAJF,gBAIEA,OAJF;AAAA,sBAMuC,KAAK1B,KAN5C;AAAA,QAMEN,YANF,eAMEA,YANF;AAAA,QAMgBE,kBANhB,eAMgBA,kBANhB;AAON,wBACE;AAAA,8BACG,qBAAC,iBAAD,CAAG,uBAAH;AACE,QAAA,GAAG,EAAE,KAAKoB,SADZ;AAEE,QAAA,UAAU,EAAES,UAFd;AAGE,QAAA,KAAK,EAAElC,KAHT;AAIE,QAAA,YAAY,EAAC,WAJf;AAKE,QAAA,YAAY,EAAEG,YALhB;AAME,QAAA,WAAW,EAAC;AANd,QADH,eASG,qBAAC,iBAAD,CAAG,YAAH;AACG,QAAA,GAAG,EAAE,KAAKwB,QADb;AAEG,QAAA,UAAU,EAAEO,UAFf;AAGG,QAAA,OAAO,EAAC;AAHX,QATH,eAcG,qBAAC,iBAAD,CAAG,kBAAH;AACE,QAAA,kBAAkB,EAAE7B;AADtB,QAdH,eAiBG,qBAAC,iBAAD,CAAG,UAAH;AACG,QAAA,OAAO,EAAEmB,OADZ;AAEG,QAAA,OAAO,EAAE,KAAKD,YAAL,CAAkBC,OAAlB,CAFZ;AAGG,QAAA,OAAO,EAAE,KAAKvB,YAHjB;AAIG,QAAA,OAAO,EAAEkC;AAJZ,QAjBH;AAAA,MADF;AA0BD,G;;;EAvHwBC,gB;;eA0HZ5C,Y","sourcesContent":["import { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport A from './Atoms'\r\n\r\nclass ListEditPane extends Component {\r\n  /*\r\n  static propTypes = {\r\n    store: PropTypes.shape({\r\n      listen: PropTypes.func,\r\n      getWatchGroups: PropTypes.func\r\n    }),\r\n    actionCompleted: PropTypes.string,\r\n    forActionType: PropTypes.string,\r\n\r\n    inputStyle: PropTypes.object,\r\n    btStyle: PropTypes.object,\r\n\r\n    onRename: PropTypes.func,\r\n    onClose: PropTypes.func\r\n  }\r\n  */\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      groupOptions: props.store.getWatchGroups(),\r\n      listOptions: [],\r\n      validationMessages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.unsubscribe = this.props.store\r\n      .listen(this._onStore)\r\n  }\r\n  componentWillUnmount(){\r\n    this.unsubscribe()\r\n  }\r\n  _onStore = (actionType, data) => {\r\n    const { actionCompleted, actionFailed, forActionType, store } = this.props;\r\n    if (actionType === actionCompleted){\r\n        if (data.forActionType === forActionType){\r\n          this._handleClear()\r\n        }\r\n        this.setState({ groupOptions : store.getWatchGroups() })\r\n    } else if (actionType === actionFailed && data.forActionType === forActionType){\r\n      this.setState({ validationMessages:data.messages })\r\n    }\r\n  }\r\n\r\n  _handleClear = () => {\r\n     this.inputText.setValue('');\r\n     if (this.state.validationMessages.length>0){\r\n       this.setState({ validationMessages:[] })\r\n     }\r\n  }\r\n\r\n  _handleRename = () => {\r\n    const { onRename, msgOnIsEmptyName, msgOnNotSelect } = this.props\r\n        , { captionGroup, captionList } = this.selectGroupList.getValue()\r\n        , captionListTo = this.inputText.getValue();\r\n    if (captionGroup && captionList && captionListTo){\r\n      onRename({\r\n        captionGroup: captionGroup,\r\n        captionListFrom: captionList,\r\n        captionListTo: captionListTo\r\n      })\r\n    } else {\r\n      const msg = [];\r\n      if (!captionGroup) { msg.push(msgOnNotSelect('Group')) }\r\n      if (!captionList)  { msg.push(msgOnNotSelect('List From')) }\r\n      if (!captionListTo){ msg.push(msgOnIsEmptyName('List To')) }\r\n      this.setState({ validationMessages:msg })\r\n    }\r\n  }\r\n\r\n  _crPrimaryBt = (btStyle) => {\r\n    return (\r\n      <A.Button.Primary\r\n         style={btStyle}\r\n         caption=\"Edit\"\r\n         title=\"Edit List Name\"\r\n         onClick={this._handleRename}\r\n      />\r\n    );\r\n  }\r\n\r\n  _refGroup = c => this.selectGroupList = c\r\n  _refText = c => this.inputText = c\r\n\r\n  render(){\r\n    const {\r\n            store,\r\n            inputStyle, btStyle,\r\n            onClose\r\n          } = this.props\r\n        , { groupOptions, validationMessages } = this.state;\r\n    return (\r\n      <div>\r\n         <A.FragmentSelectGroupList\r\n           ref={this._refGroup}\r\n           inputStyle={inputStyle}\r\n           store={store}\r\n           groupCaption=\"In Group:\"\r\n           groupOptions={groupOptions}\r\n           listCaption=\"List From:\"\r\n         />\r\n         <A.RowInputText\r\n            ref={this._refText}\r\n            inputStyle={inputStyle}\r\n            caption=\"List To:\"\r\n         />\r\n         <A.ValidationMessages\r\n           validationMessages={validationMessages}\r\n         />\r\n         <A.RowButtons\r\n            btStyle={btStyle}\r\n            Primary={this._crPrimaryBt(btStyle)}\r\n            onClear={this._handleClear}\r\n            onClose={onClose}\r\n         />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListEditPane\r\n"],"file":"ListEditPane.js"}