{"version":3,"sources":["../../../src/components/zhn-moleculs/ModalDialog.jsx"],"names":["CL","SHOWING","HIDING","S","ROOT_DIV_MODAL","position","top","left","display","zIndex","HIDE_POPUP","opacity","transform","ModalDialog","props","_refBtClose","_btClose","n","_renderCommandButton","STYLE","commandButtons","withoutClose","onClose","COMMAND_DIV","RAISED_ROOT","CL_RAISED_DIV","wasClosing","nextProps","nextState","isNotUpdate","isFocusClose","focus","focusBtClose","prevProps","prevState","timeout","isShow","setTimeout","setState","event","stopPropagation","isWithButton","style","caption","captionStyle","children","_className","_style","HIDE","SHOW","ROOT_DIV","_handleClickDialog","defaultProps"],"mappings":"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","file":"ModalDialog.js","sourcesContent":["import React, { Component } from 'react';\r\n//import PropTypes from \"prop-types\";\r\n\r\nimport BrowserCaption from '../zhn-atoms/BrowserCaption'\r\nimport RaisedButton from '../zhn-atoms/RaisedButton'\r\n\r\nimport STYLE from './Dialog.Style'\r\n\r\nconst CL = {\r\n  SHOWING : 'show-popup',\r\n  HIDING : 'hide-popup'\r\n};\r\n\r\nconst S = {\r\n  ...STYLE,\r\n  ROOT_DIV_MODAL: {\r\n    position: 'absolute',\r\n    top: '20%',\r\n    left: '40%',\r\n    display: 'block',\r\n    zIndex: 10\r\n  },\r\n  HIDE_POPUP: {\r\n    opacity: 0,\r\n    transform: 'scaleY(0)'\r\n  },\r\n};\r\n\r\nclass ModalDialog extends Component {\r\n  /*\r\n   static propTypes = {\r\n     isShow: PropTypes.bool,\r\n     isWithButton: PropTypes.bool,\r\n     isNotUpdate: PropTypes.bool,\r\n     withoutClose: PropTypes.bool,\r\n     isFocusClose: PropTypes.bool,\r\n     commandButtons: PropTypes.arrayOf(PropTypes.element),\r\n     timeout: PropTypes.number,\r\n     caption: PropTypes.string,\r\n     style: PropTypes.object,\r\n     onClose: PropTypes.func\r\n   }\r\n   */\r\n   static defaultProps = {\r\n     isWithButton: true,\r\n     isNotUpdate: false,\r\n     isFocusClose: true,\r\n     timeout: 450,\r\n     STYLE: {}\r\n   }\r\n\r\n   constructor(props){\r\n     super()\r\n     this.wasClosing = false\r\n   }\r\n\r\n   shouldComponentUpdate(nextProps, nextState){\r\n     if (nextProps !== this.props){\r\n       if (nextProps.isNotUpdate){\r\n         return false;\r\n       }\r\n     }\r\n     return true;\r\n   }\r\n\r\n   focusBtClose(){\r\n     if (this.props.isFocusClose && this._btClose) {\r\n       this._btClose.focus()\r\n     }\r\n   }\r\n\r\n   componentDidMount(){\r\n     this.focusBtClose()\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState){\r\n    const { timeout, isShow } = this.props\r\n     if (this.wasClosing){\r\n       setTimeout(\r\n         () => { this.setState({}) },\r\n         timeout\r\n       )\r\n     }\r\n     if (prevProps.isShow === false && isShow) {\r\n       this.focusBtClose()\r\n     }\r\n   }\r\n\r\n\r\n  _handleClickDialog(event) {\r\n    event.stopPropagation()\r\n   }\r\n\r\n  _refBtClose = n => this._btClose = n\r\n\r\n  _renderCommandButton = () => {\r\n    const { STYLE, commandButtons, withoutClose, onClose } = this.props;\r\n    return (\r\n      <div style={S.COMMAND_DIV}>\r\n        {commandButtons}\r\n        { !withoutClose &&\r\n           <RaisedButton\r\n             ref={this._refBtClose}\r\n             rootStyle={STYLE.RAISED_ROOT}\r\n             clDiv={STYLE.CL_RAISED_DIV}\r\n             caption=\"Close\"\r\n             isPrimary={true}\r\n             onClick={onClose}\r\n           />\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render(){\r\n    const {\r\n            isShow, isWithButton, style,\r\n            caption, captionStyle,\r\n            //styleCaption,\r\n            children, onClose\r\n          } = this.props;\r\n\r\n    let _className, _style;\r\n\r\n    if (this.wasClosing){\r\n      _style = S.HIDE\r\n      this.wasClosing = false\r\n    } else {\r\n      _className = isShow ? CL.SHOWING : CL.HIDING\r\n      _style = isShow ? S.SHOW : S.HIDE_POPUP\r\n      if (!isShow){\r\n        this.wasClosing = true\r\n      }\r\n    }\r\n\r\n    return (\r\n         <div\r\n            className={_className}\r\n            style={{\r\n              ...S.ROOT_DIV, ...S.ROOT_DIV_MODAL,\r\n              ...style, ..._style\r\n            }}\r\n            onClick={this._handleClickDialog}\r\n         >\r\n            <BrowserCaption\r\n               rootStyle={captionStyle}\r\n               caption={caption}\r\n               onClose={onClose}\r\n            />\r\n            <div>\r\n              {children}\r\n            </div>\r\n            {isWithButton && this._renderCommandButton()}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ModalDialog\r\n"]}