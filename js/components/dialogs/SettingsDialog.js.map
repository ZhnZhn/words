{"version":3,"sources":["../../../src/components/dialogs/SettingsDialog.jsx"],"names":["S","MODAL","position","width","height","margin","CARD_ROOT","CARD_BUTTONS","right","bottom","cursor","SettingsDialog","props","_hSelectTheme","item","theme","getThemeName","value","changeTheme","_hSetAndClose","onClose","_setKey1","iComp1","getValue","_ref1","n","data","key1","isShow","TS","createStyle","BT","R_DIALOG","BROWSER_CAPTION","TAB","FLAT_ROOT"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAEA,IAAMA,IAAI;AACRC,SAAO;AACLC,cAAW,QADN;AAELC,WAAO,GAFF;AAGLC,YAAQ,GAHH;AAILC,YAAQ;AAJH,GADC;AAORC,aAAW;AACTJ,cAAU,UADD;AAETE,YAAQ;AAFC,GAPH;AAWRG,gBAAc;AACZL,cAAU,UADE;AAEZM,WAAO,CAFK;AAGZC,YAAQ,CAHI;AAIZC,YAAQ;AAJI;AAXN,CAAV;;IAmBMC,c;;;AAEJ,0BAAYC,KAAZ,EAAkB;AAAA;;AAAA,8IACVA,KADU;;AAAA,UAMlBC,aANkB,GAMF,UAACC,IAAD,EAAU;AAAA,UAChBC,KADgB,GACN,MAAKH,KADC,CAChBG,KADgB;;AAExB,UACID,QACAC,MAAMC,YAAN,OAAyBF,KAAKG,KAFlC,EAGE;AACA,mCAAQC,WAAR,CAAoBJ,KAAKG,KAAzB;AACD;AACF,KAdiB;;AAAA,UAgBlBE,aAhBkB,GAgBF,YAAM;AAAA,UACXC,OADW,GACC,MAAKR,KADN,CACXQ,OADW;;AAEnB,YAAKC,QAAL,CAAc,MAAKC,MAAL,CAAYC,QAAZ,EAAd;AACAH;AACF,KApBiB;;AAAA,UAuBlBI,KAvBkB,GAuBV,UAACC,CAAD;AAAA,aAAO,MAAKH,MAAL,GAAcG,CAArB;AAAA,KAvBU;;AAAA,QAERC,IAFQ,GAECd,KAFD,CAERc,IAFQ;;AAGhB,UAAKL,QAAL,GAAgBK,KAAKC,IAArB;AAHgB;AAIjB;;;;6BAqBO;AAAA,mBAMI,KAAKf,KANT;AAAA,UAEEG,KAFF,UAEEA,KAFF;AAAA,UAGEa,MAHF,UAGEA,MAHF;AAAA,UAKER,OALF,UAKEA,OALF;AAAA,UAOAS,EAPA,GAOKd,MAAMe,WAAN,kBAPL;;;AASN,aACE;AAAA;AAAA;AACG,iBAAOD,GAAGE,EADb;AAEG,4CAAY/B,EAAEC,KAAd,EAAwB4B,GAAGG,QAA3B,CAFH;AAGG,mBAAQ,eAHX;AAIG,wBAAcH,GAAGI,eAJpB;AAKG,kBAAQL,MALX;AAMG,wBAAc,KANjB;AAOG,mBAASR;AAPZ;AASE;AAAA;AAAA,YAAS,OAAM,MAAf;AACE;AAAA;AAAA,cAAK,OAAM,SAAX,EAAqB,OAAOS,GAAGK,GAA/B;AACG;AACE,mBAAK,KAAKV,KADZ;AAEE,qBAAOxB,EAAEM,SAFX;AAGE,4BAAcN,EAAEO,YAHlB;AAIE,uBAASsB,GAAGE,EAAH,CAAMI,SAJjB;AAKE,qBAAO,KAAKhB,aALd;AAME,uBAASC;AANX;AADH,WADF;AAWE;AAAA;AAAA,cAAK,OAAM,UAAX,EAAsB,OAAOS,GAAGK,GAAhC;AACG;AACE,qBAAOlC,EAAEM,SADX;AAEE,4BAAcN,EAAEO,YAFlB;AAGE,uBAASsB,GAAGE,EAAH,CAAMI,SAHjB;AAIE,0BAAY,KAAKtB,aAJnB;AAKE,uBAASO;AALX;AADH;AAXF;AATF,OADF;AAiCD;;;;;kBAGY,yBAAUT,cAAV,C","file":"SettingsDialog.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport withTheme from '../hoc/withTheme'\r\nimport styleConfig from './Dialog.Style'\r\n\r\nimport Actions from '../../flux/actions/ComponentActions'\r\n\r\nimport ModalDialog from '../zhn-moleculs/ModalDialog'\r\nimport TabPane from '../zhn-atoms/TabPane'\r\nimport Tab from '../zhn-atoms/Tab'\r\n\r\nimport CardApiKey from './CardApiKey'\r\nimport CardUi from './CardUi'\r\n\r\nconst S = {\r\n  MODAL: {\r\n    position : 'static',\r\n    width: 350,\r\n    height: 290,\r\n    margin: '70px auto 0px'\r\n  },\r\n  CARD_ROOT: {\r\n    position: 'relative',\r\n    height: 200\r\n  },\r\n  CARD_BUTTONS: {\r\n    position: 'absolute',\r\n    right: 4,\r\n    bottom: 0,\r\n    cursor: 'default'\r\n  }\r\n};\r\n\r\nclass SettingsDialog extends Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    const { data } = props;\r\n    this._setKey1 = data.key1\r\n  }\r\n\r\n  _hSelectTheme = (item) => {\r\n    const { theme } = this.props;\r\n    if (\r\n        item &&\r\n        theme.getThemeName() !== item.value\r\n    ) {\r\n      Actions.changeTheme(item.value)\r\n    }\r\n  }\r\n\r\n  _hSetAndClose = () => {\r\n     const { onClose } = this.props\r\n     this._setKey1(this.iComp1.getValue())\r\n     onClose()\r\n  }\r\n\r\n\r\n  _ref1 = (n) => this.iComp1 = n\r\n\r\n  render(){\r\n    const {\r\n            theme,\r\n            isShow,\r\n            //data,\r\n            onClose\r\n          } = this.props\r\n        , TS = theme.createStyle(styleConfig);\r\n\r\n    return (\r\n      <ModalDialog\r\n         STYLE={TS.BT}\r\n         style={{ ...S.MODAL, ...TS.R_DIALOG }}\r\n         caption=\"User Settings\"\r\n         captionStyle={TS.BROWSER_CAPTION}\r\n         isShow={isShow}\r\n         isWithButton={false}\r\n         onClose={onClose}\r\n      >\r\n        <TabPane width=\"100%\">\r\n          <Tab title=\"API Key\" style={TS.TAB}>\r\n             <CardApiKey\r\n               ref={this._ref1}\r\n               style={S.CARD_ROOT}\r\n               buttonsStyle={S.CARD_BUTTONS}\r\n               btStyle={TS.BT.FLAT_ROOT}\r\n               onSet={this._hSetAndClose}\r\n               onClose={onClose}\r\n             />\r\n          </Tab>\r\n          <Tab title=\"UI Theme\" style={TS.TAB}>\r\n             <CardUi\r\n               style={S.CARD_ROOT}\r\n               buttonsStyle={S.CARD_BUTTONS}\r\n               btStyle={TS.BT.FLAT_ROOT}\r\n               onSetTheme={this._hSelectTheme}\r\n               onClose={onClose}\r\n             />\r\n          </Tab>\r\n        </TabPane>\r\n      </ModalDialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withTheme(SettingsDialog)\r\n"]}