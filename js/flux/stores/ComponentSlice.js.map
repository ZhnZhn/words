{"version":3,"sources":["../../../src/flux/stores/ComponentSlice.js"],"names":["DF_WATCH_PANE_ID","DialogLogic","showDialog","slice","itemConf","type","key","Comp","Factory","crDialog","PaneLogic","showPane","store","paneId","id","crPane","CompLogic","crAbout","ComponentSlice","dialogInit","paneInit","showAlertDialog","option","modalDialogType","MD","EXCEPTION","trigger","T","SHOW_MODAL_DIALOG","onShowBrowser","browserId","SHOW_BROWSER","onShowDialog","event","r","SHOW_DIALOG","onShowModalDialog","onShowPane","pane","SHOW_PANE","CLOSE_ABOUT","onShowAbout","_initAbout","SHOW_ABOUT","onChangeTheme","themeName","CHANGE_THEME","onClickWatchItem","item","CLICK_WATCH_ITEM"],"mappings":"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","sourcesContent":["import { T } from '../actions/ComponentActions'\r\n\r\nimport Factory from '../logic/Factory'\r\nimport { ModalDialog as MD } from '../../constants/Type'\r\n\r\nconst DF_WATCH_PANE_ID = 'P_WD_W';\r\n\r\nconst DialogLogic = {\r\n  showDialog(slice, itemConf){\r\n    const { type } = itemConf;\r\n    if (slice[type]) {\r\n      return { key: type };\r\n    } else {\r\n      const Comp = Factory.crDialog(itemConf);\r\n      slice[type] = true\r\n      return { key: type, Comp };\r\n    }\r\n  }\r\n};\r\n\r\nconst PaneLogic = {\r\n  showPane(slice, itemConf, store){\r\n    const { type, paneId } = itemConf;\r\n    if (slice[type]){\r\n      return { id: paneId };\r\n    } else {\r\n      const Comp = Factory.crPane(itemConf, store)\r\n      slice[type] = true;\r\n      return { Comp };\r\n    }\r\n  },\r\n\r\n  /*\r\n  togglePane(itemConf){\r\n    return {\r\n      id: itemConf.paneId\r\n    };\r\n  }\r\n  */\r\n\r\n}\r\n\r\nconst CompLogic = {\r\n  crAbout(store) {\r\n    const Comp = Factory.crAbout(store)\r\n    return { Comp };\r\n  }\r\n}\r\n\r\nconst ComponentSlice = {\r\n  dialogInit: {},\r\n  paneInit: {},\r\n\r\n  showAlertDialog(option={}){\r\n   option.modalDialogType = MD.EXCEPTION;\r\n   this.trigger(T.SHOW_MODAL_DIALOG, option);\r\n },\r\n\r\n  onShowBrowser(browserId) {\r\n    this.trigger(T.SHOW_BROWSER, browserId)\r\n  },\r\n\r\n  onShowDialog(itemConf, event){\r\n    const r = DialogLogic.showDialog(this.dialogInit, itemConf);\r\n    this.trigger(T.SHOW_DIALOG, r)\r\n  },\r\n\r\n  onShowModalDialog(modalDialogType, option={}){\r\n    option.modalDialogType = modalDialogType\r\n    this.trigger(T.SHOW_MODAL_DIALOG, option)\r\n  },\r\n\r\n  onShowPane(itemConf){\r\n    const pane = PaneLogic.showPane(this.paneInit, itemConf, this);\r\n    //const browser = BrowserLogic.updateBadge(this.hmBrowser, itemConf);\r\n    this.trigger(T.SHOW_PANE, pane)\r\n    this.trigger(T.CLOSE_ABOUT)\r\n    //this.trigger(TYPES.UPDATE_BROWSER, browser)\r\n  },\r\n  /*\r\n  onTogglePane(itemConf){\r\n    //const browser = BrowserLogic.toggleBadge(this.hmBrowser, itemConf);\r\n    const pane = PaneLogic.togglePane(itemConf);\r\n    this.trigger(T.TOGGLE_PANE, pane)\r\n    //this.trigger(TYPES.UPDATE_BROWSER, browser)\r\n  },\r\n  */\r\n  /*\r\n  onClosePane(itemConf){\r\n    //const r = BrowserLogic.updateBadge(this.hmBrowser, itemConf, {isOpen:false});\r\n    //this.trigger(TYPES.UPDATE_BROWSER, r)\r\n  },\r\n  */\r\n\r\n  onShowAbout(){\r\n    if (!this._initAbout) {\r\n      const pane = CompLogic.crAbout(this);\r\n      this._initAbout = true\r\n      this.trigger(T.SHOW_PANE, pane)\r\n    } else {\r\n      this.trigger(T.SHOW_ABOUT)\r\n    }\r\n  },\r\n\r\n  onChangeTheme(themeName){\r\n    this.trigger(T.CHANGE_THEME, themeName)\r\n  },\r\n\r\n  onClickWatchItem(item){\r\n    item.id = item.id || DF_WATCH_PANE_ID;\r\n    this.trigger(T.CLICK_WATCH_ITEM, item)\r\n  }\r\n\r\n}\r\n\r\nexport default ComponentSlice\r\n"],"file":"ComponentSlice.js"}