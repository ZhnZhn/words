{"version":3,"sources":["../../../src/flux/actions/ItemActions.js"],"names":["T","LOAD_ITEM","LOAD_ITEM_COMPLETED","LOAD_ITEM_FAILED","REMOVE_ITEM","REMOVE_ITEMS","REMOVE_ITEMS_UNDER","Actions","createActions","children","_crDbLoadMsg","word","listen","option","itemConf","paneId","isItem","failed","msg","loadId","getApiConf","apiKey","adapter","api","msgErr","Object","assign","completed"],"mappings":";;;;;;;;;;;;;AAAA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEO,IAAMA,gBAAI;AACfC,aAAW,UADI;AAEfC,uBAAqB,mBAFN;AAGfC,oBAAkB,gBAHH;;AAKfC,eAAa,YALE;AAMfC,gBAAc,aANC;AAOfC,sBAAoB;AAPL,CAAV;;AAUP,IAAMC,UAAU,iBAAOC,aAAP,mFACbR,EAAEC,SADW,EACC;AACbQ,YAAU,CAAC,WAAD,EAAc,QAAd;AADG,CADD,wDAIbT,EAAEI,WAJW,EAIG,EAJH,wDAKbJ,EAAEK,YALW,EAKI,EALJ,wDAMbL,EAAEM,kBANW,EAMU,EANV,0BAAhB;;AAUA,IAAMI,eAAe,SAAfA,YAAe;AAAA,qBAAiBC,IAAjB;AAAA,CAArB;;AAEAJ,QAAQP,EAAEC,SAAV,EAAqBW,MAArB,CAA4B,YAAmB;AAAA,MAAVC,MAAU,uEAAH,EAAG;AAAA,yBAEZA,MAFY,CAErCC,QAFqC;AAAA,MAErCA,QAFqC,oCAE5B,EAF4B;AAAA,qBAEZD,MAFY,CAExBF,IAFwB;AAAA,MAExBA,IAFwB,gCAEnB,EAFmB;AAAA,MAGrCI,MAHqC,GAG1BD,QAH0B,CAGrCC,MAHqC;;AAI7C,MAAI,gBAAMC,MAAN,CAAaD,MAAb,EAAqBJ,IAArB,CAAJ,EAA+B;AAC7B,SAAKM,MAAL,CAAY,EAAEC,KAAKR,aAAaC,IAAb,CAAP,EAAZ;AACA;AACD;;AAP4C,uBAWzCE,MAXyC,CAU3CM,MAV2C;AAAA,MAU3CA,MAV2C,kCAUpC,IAVoC;AAAA,8BAgBzC,wBAAcC,UAAd,CAAyBD,MAAzB,CAhByC;AAAA,MAa3CE,MAb2C,yBAa3CA,MAb2C;AAAA,MAc3CC,OAd2C,yBAc3CA,OAd2C;AAAA,MAclCC,GAdkC,yBAclCA,GAdkC;AAAA,MAe3CC,MAf2C,yBAe3CA,MAf2C;;AAiB7C,MAAIH,MAAJ,EAAW;AACTI,WAAOC,MAAP,CAAcb,MAAd,EAAsB,EAAEQ,cAAF,EAAUC,gBAAV,EAAmBC,QAAnB,EAAtB;AACA,4BAASV,MAAT,EAAiB,KAAKc,SAAtB,EAAiC,KAAKV,MAAtC;AACD,GAHD,MAGO;AACL,SAAKA,MAAL,CAAY,EAAEC,KAAKM,MAAP,EAAZ;AACD;AACF,CAvBD;;kBA0BejB,O","file":"ItemActions.js","sourcesContent":["import Reflux from 'reflux'\r\n\r\nimport Store from '../stores/Store'\r\n\r\nimport RouterApiConf from '../logic/RouterApiConf'\r\nimport loadItem from '../logic/loadItem'\r\n\r\nexport const T = {\r\n  LOAD_ITEM: 'loadItem',\r\n  LOAD_ITEM_COMPLETED: 'loadItemCompleted',\r\n  LOAD_ITEM_FAILED: 'loadItemFailed',\r\n\r\n  REMOVE_ITEM: 'removeItem',\r\n  REMOVE_ITEMS: 'removeItems',\r\n  REMOVE_ITEMS_UNDER: 'removeItemsUnder'\r\n};\r\n\r\nconst Actions = Reflux.createActions({\r\n  [T.LOAD_ITEM]: {\r\n    children: ['completed', 'failed']\r\n  },\r\n  [T.REMOVE_ITEM]: {},\r\n  [T.REMOVE_ITEMS]: {},\r\n  [T.REMOVE_ITEMS_UNDER]: {}\r\n});\r\n\r\n\r\nconst _crDbLoadMsg = word => `Item '${word}' has been already loaded.`;\r\n\r\nActions[T.LOAD_ITEM].listen(function(option={}){\r\n\r\n  const { itemConf={}, word='' } = option\r\n      , { paneId } = itemConf;\r\n  if (Store.isItem(paneId, word)){\r\n    this.failed({ msg: _crDbLoadMsg(word) })\r\n    return;\r\n  }\r\n\r\n  const {\r\n    loadId='WD'\r\n  } = option\r\n  , {\r\n    apiKey,\r\n    adapter, api,\r\n    msgErr\r\n  } = RouterApiConf.getApiConf(loadId);\r\n  if (apiKey){\r\n    Object.assign(option, { apiKey, adapter, api })\r\n    loadItem(option, this.completed, this.failed)\r\n  } else {\r\n    this.failed({ msg: msgErr })\r\n  }\r\n});\r\n\r\n\r\nexport default Actions\r\n"]}